/*
 *
 * ArborApiImpl.cc source template automatically generated by a class generator
 * Creation date : lun. fï¿½vr. 10 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/api/ArborApiImpl.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"
#include "arborpfa/arbor/Arbor.h"
#include "arborpfa/content/ArborObjectManager.h"
#include "arborpfa/content/ConnectorManager.h"

// pandora
#include "Pandora/Pandora.h"
#include "Api/PandoraApi.h"

using namespace pandora;

namespace arborpfa
{


ArborApiImpl::ArborApiImpl(Arbor *pArbor) :
		m_pArbor(pArbor)
{

}

//

pandora::StatusCode ArborApiImpl::PrepareEvent() const
{
	return m_pArbor->PrepareEvent();
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterAlgorithmFactory(const pandora::Pandora &pandora, Arbor &arbor, const std::string &algorithmType, ArborAlgorithmFactory *pFactory) const
{
	 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraApi::RegisterAlgorithmFactory(pandora, algorithmType, pFactory));
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pFactory->RegisterArbor(&arbor));

		return STATUS_CODE_SUCCESS;
}

pandora::StatusCode ArborApiImpl::RegisterEnergyResolutionFunction(const std::string &energyResolutionFunctionName, EnergyResolutionFunction *pEnergyResolutionFunction)
{
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, EnergyResolutionHelper::RegisterEnergyResolutionFunction(energyResolutionFunctionName, pEnergyResolutionFunction));

	return STATUS_CODE_SUCCESS;
}

//---------------------------------------------------------------------------------------------------------------
//
//pandora::StatusCode ArborApiImpl::GetCurrentConnectorList(const ConnectorList *&pConnectorList, std::string &listName) const
//{
//	return m_pArbor->m_pConnectorManager->GetCurrentList(pConnectorList, listName);
//}
//
////---------------------------------------------------------------------------------------------------------------
//
//pandora::StatusCode ArborApiImpl::GetConnectorList(const std::string &listName, const ConnectorList *&pConnectorList) const
//{
//	return m_pArbor->m_pConnectorManager->GetList(listName, pConnectorList);
//}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::ResetEvent() const
{
	return m_pArbor->ResetEvent();
}


} 

