/*
 *
 * ArborApiImpl.cc source template automatically generated by a class generator
 * Creation date : lun. fï¿½vr. 10 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/api/ArborApiImpl.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"
#include "arborpfa/arbor/Arbor.h"
#include "arborpfa/content/ArborPluginManager.h"
#include "arborpfa/content/ObjectManager.h"

// parent algorithms
#include "arborpfa/algorithm/ObjectCreationParentAlgorithm.h"
#include "arborpfa/algorithm/ConnectorParentAlgorithm.h"
#include "arborpfa/algorithm/ConnectorClusteringParentAlgorithm.h"
#include "arborpfa/algorithm/DummyClusteringAlgorithm.h"

// impl algorithms
#include "arborpfa/algorithm/SimpleObjectCreationAlgorithm.h"
#include "arborpfa/algorithm/IsolationTaggingAlgorithm.h"
#include "arborpfa/algorithm/ConnectorSeedingAlgorithm.h"
#include "arborpfa/algorithm/KappaConnectorCleaningAlgorithm.h"
#include "arborpfa/algorithm/TreeClusteringAlgorithm.h"
#include "arborpfa/algorithm/TopologicalTrackAssociationAlgorithm.h"
#include "arborpfa/algorithm/NeutralTreeMergingAlgorithm.h"
#include "arborpfa/algorithm/SmallNeutralFragmentMergingAlgorithm.h"
#include "arborpfa/algorithm/ArborClusterConverterAlgorithm.h"
#include "arborpfa/algorithm/ArborOutputAlgorithm.h"
#include "arborpfa/algorithm/ArborMonitoringAlgorithm.h"

// plugins
#include "arborpfa/content/SDHCALEnergyResolutionFunction.h"
#include "arborpfa/content/SDHCALQuadraticEnergyEstimator.h"
#include "arborpfa/content/SdhcalEnergyFunction.h"
#include "arborpfa/content/EcalSdhcalEnergyFunction.h"
#include "arborpfa/content/SimpleTreeBuilder.h"
#include "arborpfa/content/SimpleBranchBuilder.h"

// pandora
#include "Pandora/Pandora.h"
#include "Api/PandoraApi.h"

using namespace pandora;

namespace arbor
{

ArborApiImpl::ArborApiImpl(Arbor *pArbor) :
		m_pArbor(pArbor)
{

}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::PrepareEvent() const
{
	return m_pArbor->PrepareEvent();
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterAlgorithmFactory(Arbor &arbor, const std::string &algorithmType, ArborAlgorithmFactory *pFactory) const
{
	 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraApi::RegisterAlgorithmFactory(*arbor.GetPandora(), algorithmType, pFactory));
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pFactory->RegisterArbor(&arbor));

		return STATUS_CODE_SUCCESS;
}


pandora::StatusCode ArborApiImpl::RegisterArborAlgorithms(Arbor &arbor) const
{
	// parent algorithms
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ObjectCreationParent",
			  new arbor::ObjectCreationParentAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ConnectorClusteringParent",
			  new arbor::ConnectorClusteringParentAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ConnectorParent",
			  new arbor::ConnectorParentAlgorithm::Factory));

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "DummyClustering",
			  new arbor::DummyClusteringAlgorithm::Factory));

	// object creation algorithm
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "SimpleObjectCreation",
			  new arbor::SimpleObjectCreationAlgorithm::Factory));

	// additional event preparation algorithms
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "IsolationTagging",
				  new arbor::IsolationTaggingAlgorithm::Factory));

	// connector algorithms
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ConnectorSeeding",
				  new arbor::ConnectorSeedingAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "KappaConnectorCleaning",
				  new arbor::KappaConnectorCleaningAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "TreeClustering",
					  new arbor::TreeClusteringAlgorithm::Factory));

	// associations algorithms
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "TopologicalTrackAssociation",
			  new arbor::TopologicalTrackAssociationAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "NeutralTreeMerging",
			  new arbor::NeutralTreeMergingAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "SmallNeutralFragmentMerging",
			  new arbor::SmallNeutralFragmentMergingAlgorithm::Factory));

	// additional algorithms
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ArborClusterConverter",
			  new arbor::ArborClusterConverterAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ArborOutput",
				  new arbor::ArborOutputAlgorithm::Factory));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->RegisterAlgorithmFactory(arbor, "ArborMonitoring",
				  new arbor::ArborMonitoringAlgorithm::Factory));

	return pandora::STATUS_CODE_SUCCESS;
}


pandora::StatusCode ArborApiImpl::RegisterArborPlugins(Arbor &arbor) const
{
	// energy resolution function
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterEnergyResolutionFunction(arbor, "SDHCALEnergyResolution",
 		  new SDHCALEnergyResolutionFunction()));

 // energy estimator function
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterEnergyEstimator(arbor, "SDHCALQuadraticEnergyEstimator",
 		  new SDHCALQuadraticEnergyEstimator()));

 // branch builder
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterBranchBuilder(arbor, "SimpleBranchBuilder",
 		  new SimpleBranchBuilder()));

 // tree builder
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterTreeBuilder(arbor, "SimpleTreeBuilder",
 		  new SimpleTreeBuilder()));

 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterEnergyFunction(arbor, "SdhcalEnergyFunction",
     new SdhcalEnergyFunction()));

 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RegisterEnergyFunction(arbor, "EcalSdhcalEnergyFunction",
     new EcalSdhcalEnergyFunction()));

	PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, arbor.m_pArborPluginManager->SetCurrentTreeBuilder("SimpleTreeBuilder"));
	PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, arbor.m_pArborPluginManager->SetCurrentBranchBuilder("SimpleBranchBuilder"));
	PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, arbor.m_pArborPluginManager->SetCurrentEnergyResolutionFunction("SDHCALEnergyResolution"));
	PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, arbor.m_pArborPluginManager->SetCurrentEnergyEstimator("SDHCALQuadraticEnergyEstimator"));

	return pandora::STATUS_CODE_SUCCESS;
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterEnergyResolutionFunction(Arbor &pArbor, const std::string &energyResolutionFunctionName, IEnergyResolutionFunction *pEnergyResolutionFunction) const
{
	return pArbor.m_pArborPluginManager->RegisterEnergyResolutionFunction(energyResolutionFunctionName, pEnergyResolutionFunction);
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterEnergyEstimator(Arbor &pArbor, const std::string &energyEstimatorName, IEnergyEstimator *pEnergyEstimator) const
{
	return pArbor.m_pArborPluginManager->RegisterEnergyEstimator(energyEstimatorName, pEnergyEstimator);
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterEnergyFunction(Arbor &pArbor, const std::string &energyFunctionName, IEnergyFunction *pEnergyFunction) const
{
	return pArbor.m_pArborPluginManager->RegisterEnergyFunction(energyFunctionName, pEnergyFunction);
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterTreeBuilder(Arbor &pArbor, const std::string &treeBuilderName, ITreeBuilder *pTreeBuilder) const
{
	return pArbor.m_pArborPluginManager->RegisterTreeBuilder(treeBuilderName, pTreeBuilder);
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::RegisterBranchBuilder(Arbor &pArbor, const std::string &branchBuilderName, IBranchBuilder *pBranchBuilder) const
{
	return pArbor.m_pArborPluginManager->RegisterBranchBuilder(branchBuilderName, pBranchBuilder);
}

//---------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborApiImpl::ResetEvent() const
{
	return m_pArbor->ResetEvent();
}


} 

