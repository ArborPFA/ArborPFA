  /// \file ArborContentApiImpl.cc
/*
 *
 * ArborContentApiImpl.cc source template automatically generated by a class generator
 * Creation date : dim. fï¿½vr. 9 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/api/ArborContentApiImpl.h"
#include "arborpfa/arbor/Arbor.h"
#include "arborpfa/content/ConnectorManager.h"
#include "arborpfa/content/ArborObjectManager.h"

// pandora
#include "Api/PandoraContentApi.h"

using namespace pandora;

namespace arborpfa
{

ArborContentApiImpl::ArborContentApiImpl(Arbor *pArbor) :
		m_pArbor(pArbor)
{

}

/*

pandora::StatusCode ArborContentApiImpl::CreateConnector(ArborObjectPair *pPair, arborpfa::Connector *&pConnector, float weight) const
{
	return this->CreateConnector(pPair->first, pPair->second, pConnector, weight);
}

pandora::StatusCode ArborContentApiImpl::CreateConnector(ArborObject *pObj1, ArborObject *pObj2, arborpfa::Connector *&pConnector, float weight) const
{
	return m_pArbor->m_pConnectorManager->CreateConnector(pObj1, pObj2, pConnector, weight);
}

pandora::StatusCode ArborContentApiImpl::CreateArborObject(ArborObject *&pArborObject, ArborObject::Type type, void *pInputObject) const
{
	return m_pArbor->m_pArborObjectManager->CreateArborObject(pArborObject, type, pInputObject);
}


//-----------------------------------------------------------------------------------------------------------------------




pandora::StatusCode ArborContentApiImpl::GetCurrentConnectorList(const ConnectorList *&pConnectorList, std::string &listName) const
{
	return m_pArbor->m_pConnectorManager->GetCurrentList(pConnectorList, listName);
}



pandora::StatusCode ArborContentApiImpl::GetCurrentConnectorListName(std::string &listName) const
{
	return m_pArbor->m_pConnectorManager->GetCurrentListName(listName);
}



pandora::StatusCode ArborContentApiImpl::GetConnectorList(const std::string &listName, const ConnectorList *&pConnectorList) const
{
	return m_pArbor->m_pConnectorManager->GetList(listName, pConnectorList);
}



pandora::StatusCode ArborContentApiImpl::CreateTemporaryConnectorListAndSetCurrent(const ArborAlgorithm &algorithm, const ConnectorList *&pConnectorList, std::string &temporaryListName) const
{
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->CreateTemporaryListAndSetCurrent(&algorithm, temporaryListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->GetCurrentList(pConnectorList, temporaryListName));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveConnectorList(const std::string &newListName) const
{
 std::string currentConnectorListName;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->GetCurrentListName(currentConnectorListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->SaveObjects(newListName, currentConnectorListName));

 const ConnectorList *pNewConnectorList = NULL;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->GetList(newListName, pNewConnectorList));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveConnectorList(const std::string &newConnectorListName, const ConnectorList &connectorsToSave) const
{
 std::string currentConnectorListName;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->GetCurrentListName(currentConnectorListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pConnectorManager->SaveObjects(newConnectorListName, currentConnectorListName, connectorsToSave));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveConnectorList(const std::string &oldConnectorListName, const std::string &newConnectorListName) const
{
	return m_pArbor->m_pConnectorManager->SaveObjects(newConnectorListName, oldConnectorListName);
}



pandora::StatusCode ArborContentApiImpl::SaveConnectorList(const std::string &oldConnectorListName, const std::string &newConnectorListName, const ConnectorList &connectorsToSave) const
{
	return m_pArbor->m_pConnectorManager->SaveObjects(newConnectorListName, oldConnectorListName, connectorsToSave);
}



pandora::StatusCode ArborContentApiImpl::ReplaceCurrentConnectorList(const ArborAlgorithm &algorithm, const std::string &newListName) const
{
	return m_pArbor->m_pConnectorManager->ReplaceCurrentAndAlgorithmInputLists(&algorithm, newListName);
}



pandora::StatusCode ArborContentApiImpl::TemporarilyReplaceCurrentConnectorList(const std::string &newConnectorListName) const
{
 return m_pArbor->m_pConnectorManager->TemporarilyReplaceCurrentList(newConnectorListName);
}



pandora::StatusCode ArborContentApiImpl::DropCurrentConnectorList() const
{
	return m_pArbor->m_pConnectorManager->DropCurrentList();
}



//-----------------------------------------------------------------------------------------------------------------------




pandora::StatusCode ArborContentApiImpl::GetCurrentArborObjectList(const ArborObjectList *&pArborObjectList, std::string &listName) const
{
	return m_pArbor->m_pArborObjectManager->GetCurrentList(pArborObjectList, listName);
}



pandora::StatusCode ArborContentApiImpl::GetCurrentArborObjectListName(std::string &listName) const
{
	return m_pArbor->m_pArborObjectManager->GetCurrentListName(listName);
}



pandora::StatusCode ArborContentApiImpl::GetArborObjectList(const std::string &listName, const ArborObjectList *&pArborObjectList) const
{
	return m_pArbor->m_pArborObjectManager->GetList(listName, pArborObjectList);
}



pandora::StatusCode ArborContentApiImpl::CreateTemporaryArborObjectListAndSetCurrent(const ArborAlgorithm &algorithm, const ArborObjectList *&pArborObjectList, std::string &temporaryListName) const
{
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->CreateTemporaryListAndSetCurrent(&algorithm, temporaryListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->GetCurrentList(pArborObjectList, temporaryListName));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveArborObjectList(const std::string &newListName) const
{
 std::string currentArborObjectListName;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->GetCurrentListName(currentArborObjectListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->SaveObjects(newListName, currentArborObjectListName));

 const ArborObjectList *pNewArborObjectList = NULL;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->GetList(newListName, pNewArborObjectList));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveArborObjectList(const std::string &newArborObjectListName, const ArborObjectList &objectsToSave) const
{
 std::string currentArborObjectListName;
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->GetCurrentListName(currentArborObjectListName));
 PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->SaveObjects(newArborObjectListName, currentArborObjectListName, objectsToSave));

 return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ArborContentApiImpl::SaveArborObjectList(const std::string &oldArborObjectListName, const std::string &newArborObjectListName) const
{
	return m_pArbor->m_pArborObjectManager->SaveObjects(newArborObjectListName, oldArborObjectListName);
}



pandora::StatusCode ArborContentApiImpl::SaveArborObjectList(const std::string &oldArborObjectListName, const std::string &newArborObjectListName, const ArborObjectList &objectsToSave) const
{
	return m_pArbor->m_pArborObjectManager->SaveObjects(newArborObjectListName, oldArborObjectListName, objectsToSave);
}



pandora::StatusCode ArborContentApiImpl::ReplaceCurrentArborObjectList(const ArborAlgorithm &algorithm, const std::string &newListName) const
{
	return m_pArbor->m_pArborObjectManager->ReplaceCurrentAndAlgorithmInputLists(&algorithm, newListName);
}



pandora::StatusCode ArborContentApiImpl::TemporarilyReplaceCurrentArborObjectList(const std::string &newArborObjectListName) const
{
 return m_pArbor->m_pArborObjectManager->TemporarilyReplaceCurrentList(newArborObjectListName);
}



pandora::StatusCode ArborContentApiImpl::DropCurrentArborObjectList() const
{
	return m_pArbor->m_pArborObjectManager->DropCurrentList();
}





pandora::StatusCode ArborContentApiImpl::RunArborObjectAlgorithm(const ArborAlgorithm *pAlgorithm, const std::string algorithmName, const ArborObjectList *&pArborObjectList, std::string &listName) const
{
	const pandora::Algorithm *pPandoraAlgorithm = (const pandora::Algorithm *) pAlgorithm;
//	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->RegisterAlgorithm((const pandora::Algorithm *)pAlgorithm));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->CreateTemporaryListAndSetCurrent(pAlgorithm, listName));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*pPandoraAlgorithm, algorithmName));
//	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->ResetAlgorithmInfo((const pandora::Algorithm *)pAlgorithm, true));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pArbor->m_pArborObjectManager->GetCurrentList(pArborObjectList, listName));
	pPandoraAlgorithm = 0;

	return STATUS_CODE_SUCCESS;
}

*/

} 

