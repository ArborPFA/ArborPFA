/*
 *
 * DummyClusteringAlgorithm.cc source template automatically generated by a class generator
 * Creation date : mar. mars 4 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/algorithm/DummyClusteringAlgorithm.h"
#include "arborpfa/arbor/AlgorithmHeaders.h"

using namespace pandora;

namespace arborpfa
{

pandora::StatusCode DummyClusteringAlgorithm::Run()
{
	const CaloHitList *pCaloHitList = NULL;
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentCaloHitList(*this, pCaloHitList));

	Cluster *pCluster = NULL;

	for(CaloHitList::const_iterator iter = pCaloHitList->begin() , endIter = pCaloHitList->end() ; endIter != iter ; ++iter)
	{
		CaloHit *pCaloHit = *iter;

		if(pCaloHit->IsIsolated())
		{
			if(NULL == pCluster)
			{
				PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(*this, pCaloHit, pCluster));
			}
			else
			{
				PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddCaloHitToCluster(*this, pCluster, pCaloHit));
			}
		}

	}

	return STATUS_CODE_SUCCESS;
}

pandora::StatusCode DummyClusteringAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	return STATUS_CODE_SUCCESS;
}

} 

