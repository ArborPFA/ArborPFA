/*
 *
 * ConnectorClusteringParentAlgorithm.cc source template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 20 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @author Manqi Ruan
 * @author Henri Videau
 * @copyright CNRS , IPNL
 */


#include "arborpfa/algorithm/ConnectorClusteringParentAlgorithm.h"

// arbor
#include "arborpfa/arbor/AlgorithmHeaders.h"

// pandora
#include "Pandora/PandoraInternal.h"

namespace arbor
{

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ConnectorClusteringParentAlgorithm::RunArborAlgorithm()
{
	std::string oldObjectListName;

	if(!m_objectListName.empty())
	{
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::GetCurrentObjectListName(*this, oldObjectListName));
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::ReplaceCurrentObjectList(*this, m_objectListName));
	}

	// create connectors and clean them in a algorithm or a series of algorithms
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, m_connectorAlgorithmName));

 const arbor::ClusterList *pClusterList = NULL;
	// build trees and clusters in an algorithm
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::RunClusterCreationAlgorithm(*this, m_clusteringAlgorithmName, pClusterList));

 // Run the topological association algorithms to modify clusters
 if (!pClusterList->empty() && !m_associationAlgorithmName.empty())
     PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::RunDaughterAlgorithm(*this, m_associationAlgorithmName));

 if (!pClusterList->empty())
 {
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::SaveClusterList(*this, m_clusterListName));

		if (m_replaceCurrentClusterList)
		{
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::ReplaceCurrentClusterList(*this, m_clusterListName));
		}
 }

 if(m_restoreOriginalObjectList && !oldObjectListName.empty())
 {
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::ReplaceCurrentObjectList(*this, oldObjectListName));
 }

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ConnectorClusteringParentAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	m_replaceCurrentClusterList = true;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "ReplaceCurrentClusterList", m_replaceCurrentClusterList));

	m_restoreOriginalObjectList = true;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "RestoreOriginalObjectList", m_restoreOriginalObjectList));

	m_objectListName = "";
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "ObjectListName", m_objectListName));

	m_clusterListName = "ArborClusters";
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
	     "ClusterListName", m_clusterListName));

 // Daughter connector iteration algorithm
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
     "ConnectorIteration", m_connectorAlgorithmName));

 // Daughter clustering algorithm
 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
     "ClusterFormation", m_clusteringAlgorithmName));

 // Daughter association algorithm
 PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ProcessAlgorithm(*this, xmlHandle,
     "TopologicalAssociation", m_associationAlgorithmName));

	return pandora::STATUS_CODE_SUCCESS;
}


} 

