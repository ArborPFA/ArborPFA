  /// \file IsolationTaggingAlgorithm.cc
/*
 *
 * IsolationTaggingAlgorithm.cc source template automatically generated by a class generator
 * Creation date : ven. juin 13 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/algorithm/IsolationTaggingAlgorithm.h"

// arbor
#include "arborpfa/arbor/AlgorithmHeaders.h"

namespace arbor
{

pandora::StatusCode IsolationTaggingAlgorithm::RunArborAlgorithm()
{
	const ObjectList *pObjectList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::GetCurrentObjectList(*this, pObjectList));

	for(arbor::ObjectList::const_iterator objIter = pObjectList->begin() , objEndIter = pObjectList->end() ; objEndIter != objIter ; ++objIter)
	{
		arbor::Object *pObject = *objIter;
		const pandora::CartesianVector &objectPosition = pObject->GetPosition();
		const pandora::PseudoLayer &objectPseudoLayer = pObject->GetPseudoLayer();

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pObject->SetFlag(ISOLATED_OBJECT, false));

		if(1 == objectPseudoLayer)
			continue;

		bool isIsolated = false;
		unsigned int nObjectsInSameLayer = 0;
		unsigned int nObjects = 0;

		for(arbor::ObjectList::const_iterator objIter2 = pObjectList->begin() , objEndIter2 = pObjectList->end() ; objEndIter2 != objIter2 ; ++objIter2)
		{
			arbor::Object *pObject2 = *objIter2;

			if(pObject2 == pObject)
				continue;

			const pandora::CartesianVector &objectPosition2 = pObject2->GetPosition();
			const pandora::PseudoLayer &objectPseudoLayer2 = pObject2->GetPseudoLayer();

			if(objectPseudoLayer2 == objectPseudoLayer)
			{
				if(m_maxIntraLayerNeighborDistance > (objectPosition - objectPosition2).GetMagnitude())
				{
					nObjects++;
					nObjectsInSameLayer++;
				}
			}
			else
			{
				if(m_maxNeighborDistance > (objectPosition - objectPosition2).GetMagnitude())
					nObjects++;
			}
		}

		if(m_maxNObjects >= nObjects && m_maxNObjectsInSamePseudoLayer >= nObjectsInSameLayer)
			isIsolated = true;

		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pObject->SetFlag(ISOLATED_OBJECT, isIsolated));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

pandora::StatusCode IsolationTaggingAlgorithm::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	m_maxNObjectsInSamePseudoLayer = 2;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
					"MaxNObjectsInSamePseudoLayer", m_maxNObjectsInSamePseudoLayer));

	m_maxNObjects = 4;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
					"MaxNObjects", m_maxNObjects));

	m_maxNeighborDistance = 30.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
					"MaxNeighborDistance", m_maxNeighborDistance));

	m_maxIntraLayerNeighborDistance = 15.f;
	PANDORA_RETURN_RESULT_IF_AND_IF(pandora::STATUS_CODE_SUCCESS, pandora::STATUS_CODE_NOT_FOUND, !=, pandora::XmlHelper::ReadValue(xmlHandle,
					"MaxIntraLayerNeighborDistance", m_maxIntraLayerNeighborDistance));

	return pandora::STATUS_CODE_SUCCESS;
}

} 

