/*
 *
 * TrackObject.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 26 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/content/TrackObject.h"
#include "Api/PandoraContentApi.h"

#include "Helpers/GeometryHelper.h"

using namespace pandora;

namespace arborpfa
{

TrackObject::TrackObject(pandora::Track *pTrack) :
		m_pTrack(pTrack)
{

	m_type = ArborObject::TRACK;
	m_position = m_pTrack->GetTrackStateAtCalorimeter().GetPosition();
	m_granularity = GeometryHelper::GetHitTypeGranularity(INNER_DETECTOR);
	m_pseudoLayer = 0;
}

TrackObject::~TrackObject() 
{

}



pandora::StatusCode TrackObject::MergeContentInCluster(const pandora::Algorithm &algorithm, pandora::Cluster *pCluster)
{

	if(!m_pTrack->IsAvailable())
	{
		return STATUS_CODE_NOT_ALLOWED;
	}

	// if an association has been made, remove it
	if(m_pTrack->HasAssociatedCluster())
	{
		Cluster *pAssociatedCluster = NULL;
		m_pTrack->GetAssociatedCluster(pAssociatedCluster);

		if(NULL != pAssociatedCluster && pCluster != pAssociatedCluster)
		{
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::RemoveTrackClusterAssociation(algorithm, m_pTrack, pCluster));
		}
	}

	// set the new track/cluster association
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddTrackClusterAssociation(algorithm, m_pTrack, pCluster));

	return STATUS_CODE_SUCCESS;

}



pandora::StatusCode TrackObject::CreateCluster(const pandora::Algorithm &algorithm, pandora::Cluster *&pCluster)
{

	if(!m_pTrack->IsAvailable())
	{
		return STATUS_CODE_NOT_ALLOWED;
	}

	pCluster = NULL;

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(algorithm, m_pTrack, pCluster));

	return STATUS_CODE_SUCCESS;
}


} 

