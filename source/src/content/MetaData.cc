  /// \file MetaData.cc
/*
 *
 * MetaData.cc source template automatically generated by a class generator
 * Creation date : mer. juin 18 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/MetaData.h"

#include "arborpfa/content/Object.h"
#include "arborpfa/content/Connector.h"

namespace arbor
{

ObjectMetaData::ObjectMetaData()
{
	m_pCurrentBackwardConnector = NULL;
}

//--------------------------------------------------------------------------------------------------------------------

ObjectMetaData::ObjectMetaData(const ObjectMetaData *pObjectMetaData)
{
	for(ConnectorList::const_iterator iter = pObjectMetaData->m_backwardConnectorList.begin() , endIter = pObjectMetaData->m_backwardConnectorList.end() ;
			endIter != iter ; ++iter)
	{
		Connector *pConnectorCopy = new Connector(*iter);
		m_connectorList.insert(pConnectorCopy);
		m_backwardConnectorList.insert(pConnectorCopy);
	}

	for(ConnectorList::const_iterator iter = pObjectMetaData->m_forwardConnectorList.begin() , endIter = pObjectMetaData->m_forwardConnectorList.end() ;
			endIter != iter ; ++iter)
	{
		Connector *pConnectorCopy = new Connector(*iter);
		m_connectorList.insert(pConnectorCopy);
		m_forwardConnectorList.insert(pConnectorCopy);
	}

	m_pCurrentBackwardConnector = pObjectMetaData->m_pCurrentBackwardConnector;
}

//--------------------------------------------------------------------------------------------------------------------

ObjectMetaData::~ObjectMetaData()
{
	m_backwardConnectorList.clear();
	m_forwardConnectorList.clear();
	m_connectorList.clear();
	m_pCurrentBackwardConnector = NULL;
}

//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------

ReclusterMetaData::ReclusterMetaData(ObjectList *pObjectList)
{
	if(NULL == pObjectList || pObjectList->empty())
	 throw pandora::StatusCodeException(pandora::STATUS_CODE_INVALID_PARAMETER);

	m_pObjectList = pObjectList;
}

//----------------------------------------------------------------------------------------------------------------------------------------

ReclusterMetaData::~ReclusterMetaData()
{
	PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->Clear(false));
}

//----------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ReclusterMetaData::SaveMetaData()
{
	for(ObjectList::const_iterator iter = m_pObjectList->begin() , endIter = m_pObjectList->end() ; endIter != iter ; ++iter)
	{
		Object *pObject = *iter;
		m_objectMetaDataMap[pObject] = pObject->m_pMetaData;
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ReclusterMetaData::LoadMetaData()
{
	if(m_objectMetaDataMap.empty())
		return pandora::STATUS_CODE_NOT_INITIALIZED;

	for(ObjectList::const_iterator iter = m_pObjectList->begin() , endIter = m_pObjectList->end() ; endIter != iter ; ++iter)
	{
		Object *pObject = *iter;
		pObject->m_pMetaData = m_objectMetaDataMap[pObject];
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ReclusterMetaData::CreateMetaData(bool copyCurrentMetaData)
{
	if(!m_objectMetaDataMap.empty())
		return pandora::STATUS_CODE_ALREADY_INITIALIZED;

	for(ObjectList::const_iterator iter = m_pObjectList->begin() , endIter = m_pObjectList->end() ; endIter != iter ; ++iter)
	{
		Object *pObject = *iter;

		if(copyCurrentMetaData)
		{
			pObject->m_pMetaData = new ObjectMetaData(pObject->m_pMetaData);
		}
		else
		{
			pObject->m_pMetaData = new ObjectMetaData();
		}
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ReclusterMetaData::Clear(bool shouldDelete)
{
	if(shouldDelete)
	{
		for(ObjectMetaDataMap::iterator iter = m_objectMetaDataMap.begin() , endIter = m_objectMetaDataMap.end() ; endIter != iter ; ++iter)
		{
			delete iter->second;
		}
	}

	m_objectMetaDataMap.clear();

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------------------------

ObjectList *ReclusterMetaData::GetObjectList() const
{
	return m_pObjectList;
}


} 

