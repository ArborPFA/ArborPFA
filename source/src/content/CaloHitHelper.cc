/*
 *
 * CaloHitHelper.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 19 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/content/CaloHitHelper.h"

// pandora
#include "Objects/CaloHit.h"

using namespace pandora;

namespace arbor
{

pandora::StatusCode CaloHitHelper::GetCentroid(const pandora::CaloHitList *pCaloHitList, pandora::CartesianVector &centroid, bool weightWithEnergy)
{
	if(NULL == pCaloHitList || pCaloHitList->empty())
		return STATUS_CODE_FAILURE;

	centroid.SetValues(0.f, 0.f, 0.f);
	CartesianVector weight(0.f, 0.f, 0.f);
	float energy = 1.f;

	for(CaloHitList::const_iterator iter = pCaloHitList->begin() , endIter = pCaloHitList->end() ; endIter != iter ; ++iter)
	{
		CaloHit *pCaloHit = *iter;

		if(weightWithEnergy)
		{
			if(ECAL == pCaloHit->GetHitType())
			 energy = pCaloHit->GetElectromagneticEnergy();
			else if(HCAL == pCaloHit->GetHitType())
				energy = pCaloHit->GetHadronicEnergy();
			else
				energy = pCaloHit->GetInputEnergy();

			weight += CartesianVector(energy, energy, energy);
		}

		centroid += pCaloHit->GetPositionVector()*energy;
	}

	centroid = centroid * (1.0/pCaloHitList->size());

	if(weightWithEnergy)
	{
		centroid.SetValues(
				centroid.GetX()/weight.GetX(),
				centroid.GetY()/weight.GetY(),
				centroid.GetZ()/weight.GetZ()
		);
	}

	return STATUS_CODE_SUCCESS;
}


} 

