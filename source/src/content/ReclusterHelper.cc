/*
 *
 * ReclusterHelper.cc source template automatically generated by a class generator
 * Creation date : jeu. mars 5 2015
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/ReclusterHelper.h"

#include "arborpfa/arbor/AlgorithmHeaders.h"

namespace arbor
{

//--------------------------------------------------------------------------------------------------------------------

ReclusterHelper::ReclusterResult::ReclusterResult() :
		m_chi2(0.f),
		m_chargedEnergyExcess(0.f),
		m_neutralEnergy(0.f),
		m_unassociatedNTracks(0.f)
{
	/* nop */
}

//--------------------------------------------------------------------------------------------------------------------

float ReclusterHelper::ReclusterResult::GetChi2() const
{
	return m_chi2;
}

//--------------------------------------------------------------------------------------------------------------------

unsigned int ReclusterHelper::ReclusterResult::GetUnassociatedNTracks() const
{
	return m_unassociatedNTracks;
}

//--------------------------------------------------------------------------------------------------------------------

float ReclusterHelper::ReclusterResult::GetChargedEnergyExcess() const
{
	return m_chargedEnergyExcess;
}

//--------------------------------------------------------------------------------------------------------------------

float ReclusterHelper::ReclusterResult::GetNeutralEnergy() const
{
	return m_neutralEnergy;
}

//--------------------------------------------------------------------------------------------------------------------

void ReclusterHelper::ReclusterResult::SetChi2(float chi2)
{
	m_chi2 = chi2;
}

//--------------------------------------------------------------------------------------------------------------------

void ReclusterHelper::ReclusterResult::SetUnAssociatedNTracks(unsigned int nTracks)
{
	m_unassociatedNTracks = nTracks;
}

//--------------------------------------------------------------------------------------------------------------------

void ReclusterHelper::ReclusterResult::SetChargedEnergyExcess(float energyExcess)
{
	m_chargedEnergyExcess = energyExcess;
}

//--------------------------------------------------------------------------------------------------------------------

void ReclusterHelper::ReclusterResult::SetNeutralEnergy(float neutralEnergy)
{
	m_neutralEnergy = neutralEnergy;
}

//--------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ReclusterHelper::ExtractReclusterResult(const ArborAlgorithm &algorithm, const arbor::ClusterList &reclusterList,
		ReclusterHelper::ReclusterResult &reclusterResult)
{
	if(reclusterList.empty())
		return pandora::STATUS_CODE_FAILURE;

	// get the current track list that was used for the reclustering process
	const pandora::TrackList *pTrackList = NULL;
	PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, PandoraContentApi::GetCurrentTrackList((const pandora::Algorithm &)algorithm, pTrackList));

	float chi2(0.f);
	float chargedEnergyExcess(0.f);
	float neutralEnergy(0.f);
	unsigned int unassociatedNTracks(0);
//	float

	// examine clusters in the recluster list
	for(arbor::ClusterList::const_iterator reclusterIter = reclusterList.begin(), reclusterEndIter = reclusterList.end() ;
			reclusterIter != reclusterEndIter ; ++reclusterIter)
	{
		arbor::Cluster *pCluster = *reclusterIter;

		if(NULL == pCluster)
			continue;

		const pandora::Track *pAssociatedTrack = NULL;
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pCluster->GetAssociatedTrack(pAssociatedTrack));

		// get the cluster
		float clusterEnergy = 0.f;
		PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::GetEnergy(algorithm, pCluster, clusterEnergy));

		// charged cluster case
		if(NULL != pAssociatedTrack)
		{
			const float trackMomentum = pAssociatedTrack->GetTrackStateAtCalorimeter().GetMomentum().GetMagnitude();

			float energyResolution(0.f);
			PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, ArborContentApi::GetEnergyResolution(algorithm, trackMomentum, energyResolution));


			float localChi2 = 	std::pow((trackMomentum - clusterEnergy) / (energyResolution*trackMomentum), 2);
		}
	}


	return pandora::STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

} 

