/*
 *
 * ClusterObject.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 19 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/ClusterObject.h"
#include "arborpfa/content/CaloHitHelper.h"

#include "Helpers/GeometryHelper.h"

using namespace pandora;

namespace arborpfa {

ClusterObject::ClusterObject(Cluster *pCluster) :
  m_pCluster(pCluster),
		m_clusterAlreadyCreated(false),
		m_alreadyMergeContent(false)
{

	m_type = CLUSTER;

	if(NULL == pCluster)
		throw StatusCodeException(STATUS_CODE_INVALID_PARAMETER);

	CaloHitList caloHitList;
	pCluster->GetOrderedCaloHitList().GetCaloHitList(caloHitList);
	PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, arborpfa::CaloHitHelper::GetCentroid(&caloHitList, m_position));

	m_granularity = GeometryHelper::GetHitTypeGranularity(pCluster->GetInnerLayerHitType());

	m_pseudoLayer = GeometryHelper::GetPseudoLayer(m_position);
}

ClusterObject::~ClusterObject()
{

}


pandora::StatusCode ClusterObject::MergeContentInCluster(const pandora::Algorithm &algorithm, pandora::Cluster *pCluster)
{
 if(m_alreadyMergeContent)
 	return STATUS_CODE_UNCHANGED;

 std::cout << "Try to delete a cluster (cluster)" << std::endl;
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::MergeAndDeleteClusters(algorithm, pCluster, m_pCluster));

	m_alreadyMergeContent = true;

	return STATUS_CODE_SUCCESS;
}



pandora::StatusCode ClusterObject::CreateCluster(const pandora::Algorithm &algorithm, pandora::Cluster *&pCluster)
{

	if(m_clusterAlreadyCreated)
		return STATUS_CODE_UNCHANGED;

	pCluster = NULL;

	CaloHitList clusterCaloHits;
	m_pCluster->GetOrderedCaloHitList().GetCaloHitList(clusterCaloHits);

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::DeleteCluster(algorithm, m_pCluster));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(algorithm, &clusterCaloHits, pCluster));

	return STATUS_CODE_SUCCESS;
}


} 

