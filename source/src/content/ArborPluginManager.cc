  /// \file ArborPluginManager.cc
/*
 *
 * ArborPluginManager.cc source template automatically generated by a class generator
 * Creation date : ven. mai 30 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/ArborPluginManager.h"

// arbor
#include "arborpfa/arbor/Arbor.h"
#include "arborpfa/content/ITreeBuilder.h"
#include "arborpfa/content/IBranchBuilder.h"
#include "arborpfa/content/IEnergyEstimator.h"
#include "arborpfa/content/IEnergyResolutionFunction.h"
#include "arborpfa/content/IEnergyFunction.h"

#include "arborpfa/content/SimpleTreeBuilder.h"
#include "arborpfa/content/SimpleBranchBuilder.h"

using namespace pandora;

namespace arbor
{

Arbor *ArborPluginManager::m_pArbor = NULL;

ArborPluginManager::ArborPluginManager(Arbor *pArbor)
{
	m_pArbor = pArbor;
}

//-------------------------------------------------------------------------------------------------------------

ArborPluginManager::~ArborPluginManager()
{
	for(TreeBuilderMap::iterator iter = m_treeBuilderMap.begin() , endIter = m_treeBuilderMap.end() ; endIter != iter ; ++iter)
	{
		delete iter->second;
	}

	for(BranchBuilderMap::iterator iter = m_branchBuilderMap.begin() , endIter = m_branchBuilderMap.end() ; endIter != iter ; ++iter)
	{
		delete iter->second;
	}

	for(EnergyEstimatorMap::iterator iter = m_energyEstimatorMap.begin() , endIter = m_energyEstimatorMap.end() ; endIter != iter ; ++iter)
	{
		delete iter->second;
	}

		for(EnergyFunctionMap::iterator iter = m_energyFunctionMap.begin() , endIter = m_energyFunctionMap.end() ; endIter != iter ; ++iter)
		{
			delete iter->second;
		}

		m_energyFunctionMap.clear();

	m_treeBuilderMap.clear();
	m_branchBuilderMap.clear();
	m_energyEstimatorMap.clear();
}

//-------------------------------------------------------------------------------------------------------------

/*
 * TreeBuilder related methods
 */

pandora::StatusCode ArborPluginManager::RegisterTreeBuilder(const std::string &treeBuilderName, ITreeBuilder *pTreeBuilder)
{
	if(NULL == pTreeBuilder)
		return STATUS_CODE_INVALID_PARAMETER;

	TreeBuilderMap::iterator findIter = m_treeBuilderMap.find(treeBuilderName);

	if(m_treeBuilderMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_treeBuilderMap[treeBuilderName] = pTreeBuilder;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentTreeBuilder(const std::string &treeBuilderName)
{
	TreeBuilderMap::iterator findIter = m_treeBuilderMap.find(treeBuilderName);

	if(m_treeBuilderMap.end() == findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_currentTreeBuilderName = findIter->first;
	m_pCurrentTreeBuilder = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentTreeBuilder(ITreeBuilder *&pTreeBuilder)
{
	if(NULL == m_pCurrentTreeBuilder)
		return STATUS_CODE_NOT_INITIALIZED;

	pTreeBuilder = m_pCurrentTreeBuilder;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentTreeBuilderName(std::string &treeBuilderName)
{
	if(NULL == m_pCurrentTreeBuilder)
		return STATUS_CODE_NOT_INITIALIZED;

	treeBuilderName = m_currentTreeBuilderName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

/*
 * BranchBuilder related methods
 */

pandora::StatusCode ArborPluginManager::RegisterBranchBuilder(const std::string &branchBuilderName, IBranchBuilder *pBranchBuilder)
{
	if(NULL == pBranchBuilder)
		return STATUS_CODE_INVALID_PARAMETER;

	BranchBuilderMap::iterator findIter = m_branchBuilderMap.find(branchBuilderName);

	if(m_branchBuilderMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_branchBuilderMap[branchBuilderName] = pBranchBuilder;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentBranchBuilder(const std::string &branchBuilderName)
{
	BranchBuilderMap::iterator findIter = m_branchBuilderMap.find(branchBuilderName);

	if(m_branchBuilderMap.end() == findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_currentBranchBuilderName = findIter->first;
	m_pCurrentBranchBuilder = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentBranchBuilder(IBranchBuilder *&pBranchBuilder)
{
	if(NULL == m_pCurrentBranchBuilder)
		return STATUS_CODE_NOT_INITIALIZED;

	pBranchBuilder = m_pCurrentBranchBuilder;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentBranchBuilderName(std::string &branchBuilderName)
{
	if(NULL == m_pCurrentBranchBuilder)
		return STATUS_CODE_NOT_INITIALIZED;

	branchBuilderName = m_currentBranchBuilderName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

/*
 * EnergyEstimator related methods
 */

pandora::StatusCode ArborPluginManager::RegisterEnergyEstimator(const std::string &energyEstimatorName, IEnergyEstimator *pEnergyEstimator)
{
	if(NULL == pEnergyEstimator)
		return STATUS_CODE_INVALID_PARAMETER;

	EnergyEstimatorMap::iterator findIter = m_energyEstimatorMap.find(energyEstimatorName);

	if(m_energyEstimatorMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_energyEstimatorMap[energyEstimatorName] = pEnergyEstimator;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentEnergyEstimator(const std::string &energyEstimatorName)
{
	EnergyEstimatorMap::iterator findIter = m_energyEstimatorMap.find(energyEstimatorName);

	if(m_energyEstimatorMap.end() == findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_currentEnergyEstimatorName = findIter->first;
	m_pCurrentEnergyEstimator = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyEstimator(IEnergyEstimator *&pEnergyEstimator)
{
	if(NULL == m_pCurrentEnergyEstimator)
		return STATUS_CODE_NOT_INITIALIZED;

	pEnergyEstimator = m_pCurrentEnergyEstimator;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyEstimatorName(std::string &energyEstimatorName)
{
	if(NULL == m_pCurrentEnergyEstimator)
		return STATUS_CODE_NOT_INITIALIZED;

	energyEstimatorName = m_currentEnergyEstimatorName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

/*
 * EnergyResolutionFunction related methods
 */

pandora::StatusCode ArborPluginManager::RegisterEnergyResolutionFunction(const std::string &energyResolutionFunctionName, IEnergyResolutionFunction *pEnergyResolutionFunction)
{
	if(NULL == pEnergyResolutionFunction)
		return STATUS_CODE_INVALID_PARAMETER;

	EnergyResolutionFunctionMap::iterator findIter = m_energyResolutionFunctionMap.find(energyResolutionFunctionName);

	if(m_energyResolutionFunctionMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_energyResolutionFunctionMap[energyResolutionFunctionName] = pEnergyResolutionFunction;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentEnergyResolutionFunction(const std::string &energyResolutionFunctionName)
{
	EnergyResolutionFunctionMap::iterator findIter = m_energyResolutionFunctionMap.find(energyResolutionFunctionName);

	if(m_energyResolutionFunctionMap.end() == findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_currentEnergyResolutionFunctionName = findIter->first;
	m_pCurrentEnergyResolutionFunction = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyResolutionFunction(IEnergyResolutionFunction *&pEnergyResolutionFunction)
{
	if(NULL == m_pCurrentEnergyResolutionFunction)
		return STATUS_CODE_NOT_INITIALIZED;

	pEnergyResolutionFunction = m_pCurrentEnergyResolutionFunction;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyResolutionFunctionName(std::string &energyResolutionFunctionName)
{
	if(NULL == m_pCurrentEnergyResolutionFunction)
		return STATUS_CODE_NOT_INITIALIZED;

	energyResolutionFunctionName = m_currentEnergyResolutionFunctionName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::RegisterEnergyFunction(const std::string &energyFunctionName, IEnergyFunction *pEnergyFunction)
{
	if(NULL == pEnergyFunction)
		return STATUS_CODE_INVALID_PARAMETER;

	EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

	if(m_energyFunctionMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_energyFunctionMap[energyFunctionName] = pEnergyFunction;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentEnergyFunction(const std::string &energyFunctionName)
{
	EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

	if(m_energyFunctionMap.end() == findIter)
		return STATUS_CODE_NOT_FOUND;

	m_currentEnergyFunctionName = findIter->first;
	m_pCurrentEnergyFunction = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyFunctionName(std::string &energyFunctionName) const
{
	energyFunctionName = m_currentEnergyFunctionName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetEnergy(const std::string &energyFunctionName,
		const pandora::CaloHitList *const pCaloHitList, float &energy) const
{
	if(energyFunctionName == m_currentEnergyFunctionName)
	{
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pCurrentEnergyFunction->GetEnergy(pCaloHitList, energy));
		return STATUS_CODE_SUCCESS;
	}
	else
	{
		EnergyFunctionMap::const_iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->GetEnergy(pCaloHitList, energy));

		return STATUS_CODE_SUCCESS;
	}
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetEnergyResolution(const std::string &energyFunctionName,
		float energy, float &energyResolution)
{
	if(energyFunctionName == m_currentEnergyFunctionName)
	{
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pCurrentEnergyFunction->GetEnergyResolution(energy, energyResolution));
		return STATUS_CODE_SUCCESS;
	}
	else
	{
		EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->GetEnergyResolution(energy, energyResolution));

		return STATUS_CODE_SUCCESS;
	}
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	return m_pArbor->m_pArborPluginManager->_ReadSettings(xmlHandle);
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::_ReadSettings(const TiXmlHandle &xmlHandle)
{
	TiXmlElement *pEnergyResolutionFunctionElement(xmlHandle.FirstChild("EnergyResolutionFunctions").Element());
	TiXmlElement *pEnergyEstimatorElement(xmlHandle.FirstChild("EnergyEstimators").Element());
	TiXmlElement *pTreeBuilderElement(xmlHandle.FirstChild("TreeBuilders").Element());
	TiXmlElement *pBranchBuilderElement(xmlHandle.FirstChild("BranchBuilders").Element());

	if(NULL != pEnergyResolutionFunctionElement)
	{
		const TiXmlHandle energyResolutionFunctionHandle(pEnergyResolutionFunctionElement);
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadEnergyResolutionSettings(energyResolutionFunctionHandle));
	}

	if(NULL != pEnergyEstimatorElement)
	{
		const TiXmlHandle energyEstimatorHandle(pEnergyEstimatorElement);
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadEnergyEstimatorSettings(energyEstimatorHandle));
	}
//
//	if(NULL != pTreeBuilderElement)
//	{
//		const TiXmlHandle treeBuilderHandle(pTreeBuilderElement);
//		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadTreeBuilderSettings(treeBuilderHandle));
//	}
//
//	if(NULL != pBranchBuilderElement)
//	{
//		const TiXmlHandle branchBuilderHandle(pBranchBuilderElement);
//		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadBranchBuilderSettings(branchBuilderHandle));
//	}

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadEnergyFunctionSettings(xmlHandle));

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadEnergyResolutionSettings(const TiXmlHandle &xmlHandle)
{
	for(EnergyResolutionFunctionMap::iterator iter = m_energyResolutionFunctionMap.begin() , endIter = m_energyResolutionFunctionMap.end() ; endIter != iter ; ++iter)
	{
		TiXmlElement *pElement(xmlHandle.FirstChild(iter->first).Element());

		if(NULL != pElement)
		{
			const TiXmlHandle handle(pElement);
			PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, iter->second->ReadSettings(handle));
		}
	}
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadEnergyEstimatorSettings(const TiXmlHandle &xmlHandle)
{
	for(EnergyEstimatorMap::iterator iter = m_energyEstimatorMap.begin() , endIter = m_energyEstimatorMap.end() ; endIter != iter ; ++iter)
	{
		TiXmlElement *pElement(xmlHandle.FirstChild(iter->first).Element());

		if(NULL != pElement)
		{
			const TiXmlHandle handle(pElement);
			PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, iter->second->ReadSettings(handle));
		}
	}
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadTreeBuilderSettings(const TiXmlHandle &xmlHandle)
{
	for(TreeBuilderMap::iterator iter = m_treeBuilderMap.begin() , endIter = m_treeBuilderMap.end() ; endIter != iter ; ++iter)
	{
		TiXmlElement *pElement(xmlHandle.FirstChild(iter->first).Element());

		if(NULL != pElement)
		{
			const TiXmlHandle handle(pElement);
			PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, iter->second->ReadSettings(handle));
		}
	}
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadBranchBuilderSettings(const TiXmlHandle &xmlHandle)
{
	for(BranchBuilderMap::iterator iter = m_branchBuilderMap.begin() , endIter = m_branchBuilderMap.end() ; endIter != iter ; ++iter)
	{
		TiXmlElement *pElement(xmlHandle.FirstChild(iter->first).Element());

		if(NULL != pElement)
		{
			const TiXmlHandle handle(pElement);
			PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, iter->second->ReadSettings(handle));
		}
	}
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadEnergyFunctionSettings(const TiXmlHandle &xmlHandle)
{
 for (TiXmlElement *pXmlElement = xmlHandle.FirstChild("energyFunction").Element(); NULL != pXmlElement;
     pXmlElement = pXmlElement->NextSiblingElement("energyFunction"))
 {
 	const std::string energyFunctionName(pXmlElement->Attribute("name"));

		EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->ReadSettings(pandora::TiXmlHandle(pXmlElement)));
 }

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

} 

