  /// \file ArborPluginManager.cc
/*
 *
 * ArborPluginManager.cc source template automatically generated by a class generator
 * Creation date : ven. mai 30 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/ArborPluginManager.h"

// arbor
#include "arborpfa/arbor/Arbor.h"
#include "arborpfa/content/IEnergyFunction.h"

using namespace pandora;

namespace arbor
{

Arbor *ArborPluginManager::m_pArbor = NULL;

ArborPluginManager::ArborPluginManager(Arbor *pArbor)
{
	m_pArbor = pArbor;
}

//-------------------------------------------------------------------------------------------------------------

ArborPluginManager::~ArborPluginManager()
{
	// plug-in manager is the owner of energy functions
	for(EnergyFunctionMap::iterator iter = m_energyFunctionMap.begin() , endIter = m_energyFunctionMap.end() ; endIter != iter ; ++iter)
		delete iter->second;

	m_energyFunctionMap.clear();
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::RegisterEnergyFunction(const std::string &energyFunctionName, IEnergyFunction *pEnergyFunction)
{
	if(NULL == pEnergyFunction)
		return STATUS_CODE_INVALID_PARAMETER;

	EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

	if(m_energyFunctionMap.end() != findIter)
		return STATUS_CODE_ALREADY_PRESENT;

	m_energyFunctionMap[energyFunctionName] = pEnergyFunction;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::SetCurrentEnergyFunction(const std::string &energyFunctionName)
{
	EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

	if(m_energyFunctionMap.end() == findIter)
		return STATUS_CODE_NOT_FOUND;

	m_currentEnergyFunctionName = findIter->first;
	m_pCurrentEnergyFunction = findIter->second;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetCurrentEnergyFunctionName(std::string &energyFunctionName) const
{
	energyFunctionName = m_currentEnergyFunctionName;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetEnergy(const std::string &energyFunctionName,
		const pandora::CaloHitList *const pCaloHitList, float &energy) const
{
	if(energyFunctionName == m_currentEnergyFunctionName)
	{
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pCurrentEnergyFunction->GetEnergy(pCaloHitList, energy));
		return STATUS_CODE_SUCCESS;
	}
	else
	{
		EnergyFunctionMap::const_iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->GetEnergy(pCaloHitList, energy));

		return STATUS_CODE_SUCCESS;
	}
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::GetEnergyResolution(const std::string &energyFunctionName,
		float energy, float &energyResolution)
{
	if(energyFunctionName == m_currentEnergyFunctionName)
	{
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pCurrentEnergyFunction->GetEnergyResolution(energy, energyResolution));
		return STATUS_CODE_SUCCESS;
	}
	else
	{
		EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->GetEnergyResolution(energy, energyResolution));

		return STATUS_CODE_SUCCESS;
	}
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadSettings(const pandora::TiXmlHandle xmlHandle)
{
	return m_pArbor->m_pArborPluginManager->_ReadSettings(xmlHandle);
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::_ReadSettings(const TiXmlHandle &xmlHandle)
{
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->ReadEnergyFunctionSettings(xmlHandle));
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborPluginManager::ReadEnergyFunctionSettings(const TiXmlHandle &xmlHandle)
{
 for (TiXmlElement *pXmlElement = xmlHandle.FirstChild("energyFunction").Element(); NULL != pXmlElement;
     pXmlElement = pXmlElement->NextSiblingElement("energyFunction"))
 {
 	const std::string energyFunctionName(pXmlElement->Attribute("name"));

		EnergyFunctionMap::iterator findIter = m_energyFunctionMap.find(energyFunctionName);

		if(m_energyFunctionMap.end() == findIter)
			return STATUS_CODE_NOT_FOUND;

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, findIter->second->ReadSettings(pandora::TiXmlHandle(pXmlElement)));
 }

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------------

} 

