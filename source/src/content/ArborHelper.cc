/*
 *
 * ArborHelper.cc source template automatically generated by a class generator
 * Creation date : lun. mars 10 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/ArborHelper.h"

#include "Objects/Cluster.h"
#include "Objects/CartesianVector.h"
#include "Helpers/ClusterHelper.h"

#include "arborpfa/content/Object.h"
#include "arborpfa/content/Cluster.h"
#include "arborpfa/content/Connector.h"

#include "TMatrixT.h"
#include "TMatrixDEigen.h"
#include "TVectorD.h"

using namespace pandora;

namespace arbor
{

//-----------------------------------------------------------------------------------------------------------------------------

ArborHelper::LinearFit3D::LinearFit3D() :
		m_fitProcessed(false),
		m_chi2(0.f)
{
	m_fitParameters[0] = m_fitParameters[1] = m_fitParameters[2] = m_fitParameters[3] = 0;
	m_fitParameterErrors[0] = m_fitParameterErrors[1] = m_fitParameterErrors[2] = m_fitParameterErrors[3] = 0;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::Fit(const pandora::CartesianPointList &pointList)
{
	m_fitProcessed = false;
	m_chi2 = 0.f;
	m_fitParameters[0] = m_fitParameters[1] = m_fitParameters[2] = m_fitParameters[3] = 0;
	m_fitParameterErrors[0] = m_fitParameterErrors[1] = m_fitParameterErrors[2] = m_fitParameterErrors[3] = 0;

	if(pointList.empty())
		return STATUS_CODE_INVALID_PARAMETER;

	float xsum = 0.0;
	float ysum = 0.0;
	float zsum = 0.0;
	float zzsum = 0.0;
	float xzsum = 0.0;
	float yzsum = 0.0;

	for ( unsigned int i=0 ; i<pointList.size() ; i++ )
	{
		//for equation 1
		zsum = zsum + pointList.at(i).GetZ();
		xsum = xsum + pointList.at(i).GetX();
		zzsum = zzsum + (pointList.at(i).GetZ()*pointList.at(i).GetZ());
		xzsum = xzsum + pointList.at(i).GetX()*pointList.at(i).GetZ();

		//for equation 2
		ysum = ysum + pointList.at(i).GetY();
		yzsum = yzsum + pointList.at(i).GetY()*pointList.at(i).GetZ();
	}

	float A1 = zsum;
	float B1 = pointList.size();
	float C1 = xsum;
	float D1 = zzsum;
	float E1 = xzsum;
	float C2 = ysum;
	float E2 = yzsum;

	m_fitParameters[0] = (D1*C1-E1*A1)/(B1*D1-A1*A1);
	m_fitParameters[1] = (E1*B1-C1*A1)/(B1*D1-A1*A1);
	m_fitParameters[2] = (D1*C2-E2*A1)/(B1*D1-A1*A1);
	m_fitParameters[3] = (E2*B1-C2*A1)/(B1*D1-A1*A1);

	m_fitParameterErrors[0] = sqrt(D1/(B1*D1-A1*A1));
	m_fitParameterErrors[1] = sqrt(B1/(B1*D1-A1*A1));
	m_fitParameterErrors[2] = sqrt(D1/(B1*D1-A1*A1));
	m_fitParameterErrors[3] = sqrt(B1/(B1*D1-A1*A1));

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, ComputeChi2(pointList));
	m_fitProcessed = true;

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

float ArborHelper::LinearFit3D::GetChi2() const
{
	return m_chi2;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::GetProjectionOnLine(const pandora::CartesianVector &point, pandora::CartesianVector &projectionPosition) const
{
	if(!m_fitProcessed)
		return STATUS_CODE_FAILURE;

	try
	{
			pandora::CartesianVector x0(m_fitParameters[0], m_fitParameters[2], 0.);
			pandora::CartesianVector x1(m_fitParameters[0]+m_fitParameters[1], m_fitParameters[2]+m_fitParameters[3], 1.);
			pandora::CartesianVector u = (x1-x0);
			u = u.GetUnitVector() *( (point-x1).GetMagnitude() * cos( u.GetOpeningAngle( point-x1 ) ) );
			projectionPosition = x1 + u;
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::GetNormaleToLine(const pandora::CartesianVector &point, pandora::CartesianVector &normale) const
{
	if(!m_fitProcessed)
		return STATUS_CODE_FAILURE;

	try
	{
		CartesianVector projection(0.f, 0.f, 0.f);
		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, GetProjectionOnLine(point, projection));
		normale = point - projection;
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::GetFitParameter(unsigned int i, float &parameter) const
{
	if(!m_fitProcessed)
		return STATUS_CODE_FAILURE;

	if(i > 3)
		return STATUS_CODE_OUT_OF_RANGE;

	parameter = m_fitParameters[i];

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::GetFitParameterError(unsigned int i, float &parameterError) const
{
	if(!m_fitProcessed)
		return STATUS_CODE_FAILURE;

	if(i > 3)
		return STATUS_CODE_OUT_OF_RANGE;

	parameterError = m_fitParameterErrors[i];

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::LinearFit3D::ComputeChi2(const pandora::CartesianPointList &pointList)
{
	m_chi2 = 0;

	try
	{
		for(unsigned int i=0 ; i<pointList.size() ; i++)
		{
			CartesianVector normale(0.f, 0.f, 0.f);
			PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, GetNormaleToLine(pointList.at(i), normale));

			float distance = normale.GetMagnitude();
			m_chi2 += distance*distance;
		}

		if(0 != m_chi2 && 1 < pointList.size())
			m_chi2 = m_chi2/(pointList.size()-1);
	}
	catch(pandora::StatusCodeException &e)
	{
		m_chi2 = 0.f;
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------

ArborHelper::PCA::PCA() :
	m_eigenValues(0.f, 0.f, 0.f),
	m_eigenVector1(0.f, 0.f, 0.f),
	m_eigenVector2(0.f, 0.f, 0.f),
	m_eigenVector3(0.f, 0.f, 0.f),
	m_barycentre(0.f, 0.f, 0.f),
	m_hasBeenProcessed(false)
{
	/* nop */
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::PCA::Process(const pandora::CartesianPointList &pointList)
{
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, Reset());

	TMatrixD covarianceMatrix(3, 3);

	// compute the mean position for each direction
	for(pandora::CartesianPointList::const_iterator iter = pointList.begin(), endIter = pointList.end() ;
			endIter != iter ; ++iter)
	{
		m_barycentre += *iter;
	}

	m_barycentre *= (1.f/pointList.size());


	for(pandora::CartesianPointList::const_iterator iter = pointList.begin(), endIter = pointList.end() ;
			endIter != iter ; ++iter)
	{
		pandora::CartesianVector point = *iter;

		covarianceMatrix(0, 0) += std::pow(point.GetX() - m_barycentre.GetX(), 2);
		covarianceMatrix(1, 1) += std::pow(point.GetY() - m_barycentre.GetY(), 2);
		covarianceMatrix(2, 2) += std::pow(point.GetZ() - m_barycentre.GetZ(), 2);

		// covariance matrix is symetric
		covarianceMatrix(1, 0) += (point.GetX() - m_barycentre.GetX())*(point.GetY() - m_barycentre.GetY());
		covarianceMatrix(0, 1) = covarianceMatrix(1, 0);
		covarianceMatrix(2, 0) += (point.GetX() - m_barycentre.GetX())*(point.GetZ() - m_barycentre.GetZ());
		covarianceMatrix(0, 2) = covarianceMatrix(2, 0);
		covarianceMatrix(2, 1) += (point.GetY() - m_barycentre.GetY())*(point.GetZ() - m_barycentre.GetZ());
		covarianceMatrix(1, 2) = covarianceMatrix(2, 1);
	}

	// normalize the covariance matrix
	for(unsigned int i=0 ; i<3 ; i++)
		for(unsigned int j=0 ; j<3 ; j++)
			covarianceMatrix(i, j) /= pointList.size();

	TMatrixDEigen matrixEigen(covarianceMatrix);

	m_eigenValues.SetValues(
			matrixEigen.GetEigenValuesRe()[0],
			matrixEigen.GetEigenValuesRe()[1],
			matrixEigen.GetEigenValuesRe()[2] );

	m_eigenVector1.SetValues(matrixEigen.GetEigenVectors()(0, 0),  matrixEigen.GetEigenVectors()(1, 0), matrixEigen.GetEigenVectors()(2, 0));
	m_eigenVector2.SetValues(matrixEigen.GetEigenVectors()(0, 1),  matrixEigen.GetEigenVectors()(1, 1), matrixEigen.GetEigenVectors()(2, 1));
	m_eigenVector3.SetValues(matrixEigen.GetEigenVectors()(0, 2),  matrixEigen.GetEigenVectors()(1, 2), matrixEigen.GetEigenVectors()(2, 2));

	m_hasBeenProcessed = true;

	return pandora::STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::PCA::Reset()
{
	try
	{
		m_hasBeenProcessed = false;
		m_eigenValues.SetValues(0.f, 0.f, 0.f);
		m_eigenVector1.SetValues(0.f, 0.f, 0.f);
		m_eigenVector2.SetValues(0.f, 0.f, 0.f);
		m_eigenVector3.SetValues(0.f, 0.f, 0.f);
		m_barycentre.SetValues(0.f, 0.f, 0.f);
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return pandora::STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::PCA::GetEigenVectors(pandora::CartesianVector &eigenVector1,
		pandora::CartesianVector &eigenVector2, pandora::CartesianVector &eigenVector3) const
{
	eigenVector1 = m_eigenVector1;
	eigenVector2 = m_eigenVector2;
	eigenVector3 = m_eigenVector3;

	return pandora::STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::PCA::GetEigenValues(float &eigenValue1, float &eigenValue2, float &eigenValue3) const
{
	eigenValue1 = m_eigenValues.GetX();
	eigenValue2 = m_eigenValues.GetY();
	eigenValue3 = m_eigenValues.GetZ();

	return pandora::STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::PCA::GetBarycentre(pandora::CartesianVector &barycentre) const
{
	barycentre = m_barycentre;
	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

ArborHelper::PCA &ArborHelper::PCA::operator=(const ArborHelper::PCA &pca)
{
	m_eigenValues  = pca.m_eigenValues;
	m_eigenVector1 = pca.m_eigenVector1;
	m_eigenVector2 = pca.m_eigenVector2;
	m_eigenVector3 = pca.m_eigenVector3;
	m_barycentre   = pca.m_barycentre;
	m_hasBeenProcessed = pca.m_hasBeenProcessed;

	return *this;
}

//-----------------------------------------------------------------------------------------------------------------------------

bool ArborHelper::PCA::HasBeenProcessed() const
{
	return m_hasBeenProcessed;
}

//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------

ArborHelper::Ellipsoid::Ellipsoid(const pandora::CartesianVector &centerPosition, const pandora::CartesianVector &axis1,
		const pandora::CartesianVector &axis2, const pandora::CartesianVector &axis3) :
			m_centerPosition(centerPosition),
			m_axis1(axis1),
			m_axis2(axis2),
			m_axis3(axis3)
{
	/* nop */
}

//-----------------------------------------------------------------------------------------------------------------------------

const pandora::CartesianVector &ArborHelper::Ellipsoid::GetAxis1() const
{
	return m_axis1;
}

//-----------------------------------------------------------------------------------------------------------------------------

const pandora::CartesianVector &ArborHelper::Ellipsoid::GetAxis2() const
{
	return m_axis2;
}

//-----------------------------------------------------------------------------------------------------------------------------

const pandora::CartesianVector &ArborHelper::Ellipsoid::GetAxis3() const
{
	return m_axis3;
}

//-----------------------------------------------------------------------------------------------------------------------------

const pandora::CartesianVector &ArborHelper::Ellipsoid::GetCenterPosition() const
{
	return m_centerPosition;
}

//-----------------------------------------------------------------------------------------------------------------------------

bool ArborHelper::Ellipsoid::Contains(const pandora::CartesianVector &point) const
{
	try
	{
		// translation to the center of the ellipsoid
		const pandora::CartesianVector translatedPoint = point - m_centerPosition;

		const pandora::CartesianVector normalizedAxis1 = m_axis1.GetUnitVector();
		const pandora::CartesianVector normalizedAxis2 = m_axis2.GetUnitVector();
		const pandora::CartesianVector normalizedAxis3 = m_axis3.GetUnitVector();

		// change the reference frame of the point
		const float newX = translatedPoint.GetX()*normalizedAxis1.GetX()
				+ translatedPoint.GetY()*normalizedAxis1.GetY()
				+ translatedPoint.GetZ()*normalizedAxis1.GetZ();
		const float newY = translatedPoint.GetX()*normalizedAxis2.GetX()
				+ translatedPoint.GetY()*normalizedAxis2.GetY()
				+ translatedPoint.GetZ()*normalizedAxis2.GetZ();
		const float newZ = translatedPoint.GetX()*normalizedAxis3.GetX()
				+ translatedPoint.GetY()*normalizedAxis3.GetY()
				+ translatedPoint.GetZ()*normalizedAxis3.GetZ();

		// check that the point is inside the ellipsoid surface
		const float axis1Lenght(m_axis1.GetMagnitude());
		const float axis2Lenght(m_axis2.GetMagnitude());
		const float axis3Lenght(m_axis3.GetMagnitude());

		const float ellipsoidDistance = (newX*newX)/(axis1Lenght*axis1Lenght)
				+ (newY*newY)/(axis2Lenght*axis2Lenght)
				+ (newZ*newZ)/(axis3Lenght*axis3Lenght);

		return (ellipsoidDistance <= 1.f);
	}
	catch(pandora::StatusCodeException &e)
	{
		return false;
	}
}

//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetCentroid(const arbor::Cluster *pCluster, pandora::CartesianVector &centroid)
{
	if(NULL == pCluster)
		return STATUS_CODE_FAILURE;

	centroid.SetValues(0.f, 0.f, 0.f);
	const ObjectList clusterObjectList = pCluster->GetObjectList();

	for(arbor::ObjectList::const_iterator iter = clusterObjectList.begin() , endIter = clusterObjectList.end() ; endIter != iter ; ++iter)
	{
		centroid += (*iter)->GetPosition();
	}

	centroid = centroid * (1.0/clusterObjectList.size());

	return STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetCentroidDifference(const arbor::Cluster *pCluster1, const arbor::Cluster *pCluster2, float &centroidDifference)
{

	CartesianVector centroid1(0.f, 0.f, 0.f);
	CartesianVector centroid2(0.f, 0.f, 0.f);

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::GetCentroid(pCluster1, centroid1));
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::GetCentroid(pCluster2, centroid2));

	centroidDifference = (centroid1 - centroid2).GetMagnitude();

	return STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetClosestDistanceApproach(const arbor::Cluster *pCluster1, const arbor::Cluster *pCluster2, float &closestDistance)
{
	if(NULL == pCluster1 || NULL == pCluster2)
		return STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster1->GetNObjects() || 0 == pCluster2->GetNObjects())
		return STATUS_CODE_FAILURE;

	const ObjectList objectList1 = pCluster1->GetObjectList();
	const ObjectList objectList2 = pCluster2->GetObjectList();

	closestDistance = std::numeric_limits<float>::max();

	for(arbor::ObjectList::const_iterator iter1 = objectList1.begin() , endIter1 = objectList1.end() ; endIter1 != iter1 ; ++iter1)
	{
		Object *pObject1 = *iter1;

		for(arbor::ObjectList::const_iterator iter2 = objectList2.begin() , endIter2 = objectList2.end() ; endIter2 != iter2 ; ++iter2)
		{
			Object *pObject2 = *iter2;

			float distance = (pObject1->GetPosition() - pObject2->GetPosition()).GetMagnitude();

			if(closestDistance > distance)
			{
				closestDistance = distance;
			}
		}
	}

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetClosestDistanceApproach(const arbor::Cluster *pCluster, const pandora::CartesianVector &point, float &closestDistance)
{
	if(NULL == pCluster)
		return STATUS_CODE_INVALID_PARAMETER;

	if(0 == pCluster->GetNObjects())
		return STATUS_CODE_FAILURE;

	const ObjectList objectList = pCluster->GetObjectList();

	closestDistance = std::numeric_limits<float>::max();

	for(arbor::ObjectList::const_iterator iter = objectList.begin() , endIter = objectList.end() ; endIter != iter ; ++iter)
	{
		Object *pObject = *iter;

		float distance = (pObject->GetPosition() - point).GetMagnitude();

		if(closestDistance > distance)
		{
			closestDistance = distance;
		}
	}

	return STATUS_CODE_SUCCESS;
}

//-----------------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::FitPoints(const CartesianPointList &pointList, pandora::ClusterHelper::ClusterFitResult &clusterFitResult)
{
 try
 {
		const unsigned int nFitPoints(pointList.size());

		if (nFitPoints < 2)
			return STATUS_CODE_FAILURE;

		clusterFitResult.Reset();

		float xSum = 0.f;
		float ySum = 0.f;
		float zSum = 0.f;
		float xzSum = 0.f;
		float yzSum = 0.f;
		float zzSum = 0.f;

  float fitParam1 = 0.f;
  float fitParam2 = 0.f;
  float fitParam3 = 0.f;
  float fitParam4 = 0.f;

		for(CartesianPointList::const_iterator iter = pointList.begin(), iterEnd = pointList.end(); iter != iterEnd; ++iter)
		{
			CartesianVector position = *iter;

   xSum += position.GetX();
   ySum += position.GetY();
   zSum += position.GetZ();

   xzSum += position.GetX()*position.GetZ();
   yzSum += position.GetY()*position.GetZ();
   zzSum += position.GetZ()*position.GetZ();
		}

  fitParam1 = (zzSum*xSum - xzSum*zSum) / (nFitPoints*zzSum-zSum*zSum);
  fitParam2 = (xzSum*nFitPoints - xSum*zSum) / (nFitPoints*zzSum-zSum*zSum);
  fitParam3 = (zzSum*ySum - yzSum*zSum) / (nFitPoints*zzSum-zSum*zSum);
  fitParam4 = (yzSum*nFitPoints - ySum*zSum) / (nFitPoints*zzSum-zSum*zSum);

  float chi2 = 0.f;

  for(CartesianPointList::const_iterator iter = pointList.begin(), iterEnd = pointList.end(); iter != iterEnd; ++iter)
		{
  	CartesianVector position = *iter;

			CartesianVector x0(fitParam1, fitParam3, 0.f);
	  CartesianVector x1(fitParam1 + fitParam2, fitParam3 + fitParam4, 1.f);
	  CartesianVector u = (x1-x0);
		 u = u.GetUnitVector() * (position-x1).GetMagnitude() * std::cos(u.GetCosOpeningAngle(position - x1));

			chi2 += (position - (x1+u)).GetMagnitude();
		}

  CartesianVector point1(fitParam2 + fitParam1, fitParam4 + fitParam3, 1.f);
  CartesianVector point2(fitParam2*2.f + fitParam1, fitParam4*2.f + fitParam3, 2.f);
  CartesianVector direction = (point2 - point1).GetUnitVector();

  clusterFitResult.SetChi2(chi2);
  clusterFitResult.SetRms(chi2 / static_cast<float>(nFitPoints));
  clusterFitResult.SetDirection(direction);
  clusterFitResult.SetSuccessFlag(true);
 }
 catch (StatusCodeException &statusCodeException)
 {
     std::cout << "ArborHelper: linear fit failed. " << std::endl;
     clusterFitResult.SetSuccessFlag(false);
     return statusCodeException.GetStatusCode();
 }

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetReferenceDirection(const Object *pObject,	float backwardConnectorWeight,
		float forwardConnectorWeight, pandora::CartesianVector &meanBackwardDirection)
{
	meanBackwardDirection = pandora::CartesianVector(0.f, 0.f, 0.f);

	if(NULL == pObject)
	{
		std::cout << "ERROR : ArborHelper::GetReferenceDirection() : pObject is NULL" << std::endl;
		return STATUS_CODE_INVALID_PARAMETER;
	}

	const ConnectorList &connectorList = pObject->GetConnectorList();
	const CartesianVector &objectPosition = pObject->GetPosition();

	for(ConnectorList::const_iterator iter = connectorList.begin() , endIter = connectorList.end() ; endIter != iter ; ++iter)
	{
		const Connector *pConnector = *iter;
		const Object *pOtherObject = NULL;

		if(pObject == pConnector->GetFirst())
		{
			pOtherObject = pConnector->GetSecond();
		}
		else
		{
			pOtherObject = pConnector->GetFirst();
		}

		CartesianVector differencePosition = pOtherObject->GetPosition() - objectPosition;

		if(!pOtherObject->IsBackwardConnector(pConnector))
		{
			meanBackwardDirection += differencePosition * - forwardConnectorWeight;
		}
		else
		{
			meanBackwardDirection += differencePosition * backwardConnectorWeight;
		}
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetReferenceDirection(const Object *pObject,	float backwardConnectorWeight,
		float forwardConnectorWeight, unsigned int depth, unsigned int numberOfForwardLayers, pandora::CartesianVector &meanBackwardDirection)
{
	meanBackwardDirection = pandora::CartesianVector(0.f, 0.f, 0.f);

	if(NULL == pObject)
	{
		std::cout << "ERROR : ArborHelper::GetReferenceDirection() : pObject is NULL" << std::endl;
		return STATUS_CODE_INVALID_PARAMETER;
	}

	if(depth == 0)
		return STATUS_CODE_INVALID_PARAMETER;

	if(numberOfForwardLayers == 0)
		return STATUS_CODE_INVALID_PARAMETER;

	const ConnectorList &backwardConnectorList = pObject->GetBackwardConnectorList();
	const ConnectorList &forwardConnectorList = pObject->GetForwardConnectorList();
	const CartesianVector &objectPosition = pObject->GetPosition();

	unsigned int startingDepth = depth - 1;
	unsigned int maxForwardLayer = pObject->GetPseudoLayer() + numberOfForwardLayers;

	for(ConnectorList::const_iterator iter = backwardConnectorList.begin() , endIter = backwardConnectorList.end() ; endIter != iter ; ++iter)
	{
		const Connector *pConnector = *iter;
		const Object *pOtherObject = NULL;

		if(pObject == pConnector->GetFirst())
		{
			pOtherObject = pConnector->GetSecond();
		}
		else
		{
			pOtherObject = pConnector->GetFirst();
		}

		CartesianVector differencePosition = pOtherObject->GetPosition() - objectPosition;
		meanBackwardDirection += differencePosition * backwardConnectorWeight;
	}

	CartesianVector meanForwardDirection(0.f, 0.f, 0.f);

	for(ConnectorList::const_iterator iter = forwardConnectorList.begin() , endIter = forwardConnectorList.end() ; endIter != iter ; ++iter)
	{
		const Connector *pConnector = *iter;
		const Object *pOtherObject = NULL;

		if(pObject == pConnector->GetFirst())
		{
			pOtherObject = pConnector->GetSecond();
		}
		else
		{
			pOtherObject = pConnector->GetFirst();
		}

		unsigned int otherPseudoLayer = pOtherObject->GetPseudoLayer();

		if(otherPseudoLayer > maxForwardLayer)
			continue;

		CartesianVector differencePosition = pOtherObject->GetPosition() - objectPosition;
		meanForwardDirection += differencePosition * forwardConnectorWeight;

		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::RecursiveReferenceDirection(pOtherObject, forwardConnectorWeight,
				startingDepth, maxForwardLayer, meanForwardDirection));
	}

	if(meanForwardDirection == CartesianVector(0.f, 0.f, 0.f))
		return STATUS_CODE_SUCCESS;

	meanBackwardDirection += meanForwardDirection * -1.f;

	if(meanBackwardDirection == CartesianVector(0.f, 0.f, 0.f))
		return STATUS_CODE_FAILURE;

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::RecursiveReferenceDirection(const Object *pObject,	float forwardConnectorWeight,
		unsigned int &currentDepth, unsigned int maxForwardLayer, pandora::CartesianVector &meanForwardDirection)
{
	// stop iteration if the maximum depth is reached
	if(currentDepth == 0)
		return STATUS_CODE_SUCCESS;

	unsigned int currentRecursiveDepth = currentDepth - 1;

	if(NULL == pObject)
		return STATUS_CODE_INVALID_PARAMETER;

	if(pObject->GetForwardConnectorList().empty())
		return STATUS_CODE_SUCCESS;

	const ConnectorList &forwardConnectorList = pObject->GetForwardConnectorList();
	const CartesianVector &objectPosition = pObject->GetPosition();

	for(ConnectorList::const_iterator iter = forwardConnectorList.begin() , endIter = forwardConnectorList.end() ; endIter != iter ; ++iter)
	{
		const Connector *pConnector = *iter;
		const Object *pOtherObject = NULL;

		if(pObject == pConnector->GetFirst())
		{
			pOtherObject = pConnector->GetSecond();
		}
		else
		{
			pOtherObject = pConnector->GetFirst();
		}

		unsigned int otherPseudoLayer = pOtherObject->GetPseudoLayer();

		if(otherPseudoLayer > maxForwardLayer)
			continue;

		CartesianVector differencePosition = pOtherObject->GetPosition() - objectPosition;
		meanForwardDirection += differencePosition * forwardConnectorWeight;

		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::RecursiveReferenceDirection(pOtherObject, forwardConnectorWeight,
				currentRecursiveDepth, maxForwardLayer, meanForwardDirection));
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetKappaParameter(float distance, float angle,
		float distancePower, float anglePower, float &kappaParameter)
{
	kappaParameter = std::pow(angle, anglePower) * std::pow(distance, distancePower);

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::BuildOrderedObjectList(const ObjectList &objectList, OrderedObjectList &orderedObjectList)
{
	if(objectList.empty())
		return STATUS_CODE_INVALID_PARAMETER;

	for(ObjectList::const_iterator iter = objectList.begin() , endIter = objectList.end() ;
			endIter != iter ; ++iter)
	{
		PseudoLayer pseudoLayer = (*iter)->GetPseudoLayer();
		orderedObjectList[pseudoLayer].insert(*iter);
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetMeanDirection(const Object *pObject, ConnectorDirection connectorDirection,
		pandora::CartesianVector &direction, unsigned int connectorDepth, unsigned int pseudoLayerDepth)
{
	if(NULL == pObject)
		return STATUS_CODE_INVALID_PARAMETER;

	ConnectorList connectorList;
	unsigned int maxPseudoLayer(0);

	if(connectorDirection == FORWARD)
	{
		connectorList = pObject->GetForwardConnectorList();
		maxPseudoLayer = pseudoLayerDepth == std::numeric_limits<unsigned int>::max() ? pseudoLayerDepth : pObject->GetPseudoLayer() + pseudoLayerDepth;
	}
	else
	{
		connectorList = pObject->GetBackwardConnectorList();
		maxPseudoLayer = pseudoLayerDepth >= pObject->GetPseudoLayer() ? 0 : pObject->GetPseudoLayer() - pseudoLayerDepth;
	}

	if(connectorList.empty())
		return STATUS_CODE_UNCHANGED;

	const pandora::CartesianVector objectPosition(pObject->GetPosition());

	for(ConnectorList::const_iterator iter = connectorList.begin() , endIter = connectorList.end() ;
			endIter != iter ; ++iter)
	{
		Connector *pConnector = *iter;
		Object *pOtherObject = NULL;

		if(pConnector->GetFirst() == pObject)
			pOtherObject = pConnector->GetSecond();
		else
			pOtherObject = pConnector->GetFirst();

		if(pOtherObject->GetPseudoLayer() > maxPseudoLayer)
			continue;

		const pandora::CartesianVector otherObjectPosition(pOtherObject->GetPosition());

		direction += (otherObjectPosition - objectPosition);

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::RecursiveDirection(pOtherObject, connectorDirection, direction, connectorDepth-1, maxPseudoLayer));
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::ExtractPositionList(const ObjectList &objectList, pandora::CartesianPointList &pointList)
{
	for(ObjectList::const_iterator iter = objectList.begin(), endIter = objectList.end() ;
			endIter != iter ; ++iter)
	{
		pointList.push_back((*iter)->GetPosition());
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::BuildObjectListWithFlag(const ObjectList &objectList, ObjectList &tagObjectList, ObjectTagFlag tagFlag)
{
	for(ObjectList::const_iterator iter = objectList.begin(), endIter = objectList.end() ;
			endIter != iter ; ++iter)
	{
		if((*iter)->GetFlag(tagFlag))
			tagObjectList.insert(*iter);
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetImpactParameter(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2, float &impactParameter)
{
	impactParameter = 0.f;

	try
	{
		const CartesianVector unitDirection1 = direction1.GetUnitVector();
		const CartesianVector unitDirection2 = direction2.GetUnitVector();
		const CartesianVector w0 = point1 - point2;
		const float b = unitDirection1.GetCosOpeningAngle(unitDirection2);
		const float d = unitDirection1.GetDotProduct(w0);
		const float e = unitDirection2.GetDotProduct(w0);
		const float denom = 1 - b*b;

		// parallel lines
		if(unitDirection1 == unitDirection2)
		{
			// compute the distance from point2 to line1
			return ArborHelper::GetImpactParameter(point1 ,unitDirection1, point2, impactParameter);
		}
		else
		{
			// compute the real impact parameter between the two lines
			const CartesianVector impactParameterVector = w0 + ( unitDirection1*((b*e - d)/denom) - unitDirection2*((e - b*d)/denom) );
			impactParameter = impactParameterVector.GetMagnitude();
		}
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetImpactParameter(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, float &impactParameter)
{
	try
	{
		// compute the distance from point2 to line1
		const CartesianVector unitDirection1 = direction1.GetUnitVector();
		float k = unitDirection1.GetDotProduct(point2-point1);
		const CartesianVector normale = point1 + unitDirection1*k - point2;
		impactParameter = normale.GetMagnitude();
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetProjectionOnLine(const pandora::CartesianVector &linePoint, const pandora::CartesianVector &direction,
		const pandora::CartesianVector &point, pandora::CartesianVector &projection)
{
	try
	{
		projection = linePoint + direction.GetUnitVector() * ((point-linePoint).GetMagnitude() * direction.GetCosOpeningAngle(point-linePoint));
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::GetCrossingPointsBetweenLines(const pandora::CartesianVector &point1, const pandora::CartesianVector &direction1,
		const pandora::CartesianVector &point2, const pandora::CartesianVector &direction2,
		pandora::CartesianVector &crossingPoint1, pandora::CartesianVector &crossingPoint2)
{
	try
	{
		// parallel lines never cross
		if(direction1.GetUnitVector() == direction2.GetUnitVector())
			return pandora::STATUS_CODE_INVALID_PARAMETER;

		const CartesianVector unitDirection1 = direction1.GetUnitVector();
		const CartesianVector unitDirection2 = direction2.GetUnitVector();
		const CartesianVector w0 = point1 - point2;
		const float b = unitDirection1.GetCosOpeningAngle(unitDirection2);
		const float d = unitDirection1.GetDotProduct(w0);
		const float e = unitDirection2.GetDotProduct(w0);
		const float denom = 1 - b*b;

		crossingPoint1 = point1 + unitDirection1*(b*e-d)*(1.f/denom);
		crossingPoint2 = point2 + unitDirection2*(e - b*d)*(1.f/denom);
	}
	catch(pandora::StatusCodeException &e)
	{
		return e.GetStatusCode();
	}

	return STATUS_CODE_SUCCESS;
}

//----------------------------------------------------------------------------------------------------------------------

pandora::StatusCode ArborHelper::RecursiveDirection(const Object *pObject, ConnectorDirection connectorDirection,
		pandora::CartesianVector &direction, unsigned int currentDepth, unsigned int maxPseudoLayer)
{
	if(NULL == pObject)
		return STATUS_CODE_INVALID_PARAMETER;

	if(0 == currentDepth)
		return STATUS_CODE_SUCCESS;

	const pandora::PseudoLayer pseudoLayer(pObject->GetPseudoLayer());

	ConnectorList connectorList;

	if(connectorDirection == FORWARD)
	{
		connectorList = pObject->GetForwardConnectorList();
	}
	else
	{
		connectorList = pObject->GetBackwardConnectorList();
	}

	if(connectorList.empty())
		return STATUS_CODE_SUCCESS;

	const pandora::CartesianVector objectPosition(pObject->GetPosition());

	for(ConnectorList::const_iterator iter = connectorList.begin() , endIter = connectorList.end() ;
			endIter != iter ; ++iter)
	{
		Connector *pConnector = *iter;
		Object *pOtherObject = NULL;

		if(pConnector->GetFirst() == pObject)
			pOtherObject = pConnector->GetSecond();
		else
			pOtherObject = pConnector->GetFirst();

		if(pOtherObject->GetPseudoLayer() > maxPseudoLayer)
			continue;

		const pandora::CartesianVector otherObjectPosition(pOtherObject->GetPosition());

		direction += (otherObjectPosition - objectPosition);

		PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborHelper::RecursiveDirection(pOtherObject, connectorDirection, direction, currentDepth-1, maxPseudoLayer));
	}

	return STATUS_CODE_SUCCESS;
}

} 

