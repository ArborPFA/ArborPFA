/*
 *
 * SimpleCaloHitObject.cc source template automatically generated by a class generator
 * Creation date : mer. fï¿½vr. 19 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


// arborpfa
#include "arborpfa/content/SimpleCaloHitObject.h"

// pandora
#include "Pandora/StatusCodes.h"
#include "Api/PandoraContentApi.h"
#include "Helpers/GeometryHelper.h"

using namespace pandora;

namespace arborpfa
{

SimpleCaloHitObject::SimpleCaloHitObject(CaloHit *pCaloHit) :
  m_pCaloHit(pCaloHit)
{

	m_type = ArborObject::SIMPLE_CALO_HIT;

	if(NULL == m_pCaloHit)
		throw StatusCodeException(STATUS_CODE_INVALID_PARAMETER);

	m_position = m_pCaloHit->GetPositionVector();

	m_granularity = GeometryHelper::GetHitTypeGranularity(m_pCaloHit->GetHitType());

	m_pseudoLayer = pCaloHit->GetPseudoLayer();
}



SimpleCaloHitObject::~SimpleCaloHitObject()
{

}


pandora::StatusCode SimpleCaloHitObject::MergeContentInCluster(const pandora::Algorithm &algorithm, pandora::Cluster *pCluster)
{
	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::AddCaloHitToCluster(algorithm, pCluster, m_pCaloHit));

	return STATUS_CODE_SUCCESS;
}

pandora::StatusCode SimpleCaloHitObject::CreateCluster(const pandora::Algorithm &algorithm, pandora::Cluster *&pCluster)
{

	if(!PandoraContentApi::IsCaloHitAvailable(algorithm, m_pCaloHit))
	{
		std::cout << "SimpleCaloHit::CreateCluster() : CaloHit not available" << std::endl;
		return STATUS_CODE_FAILURE;
	}

	pCluster = NULL;

	PANDORA_RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, PandoraContentApi::Cluster::Create(algorithm, m_pCaloHit, pCluster));

	return STATUS_CODE_SUCCESS;
}

} 

