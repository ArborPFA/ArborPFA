  /// \file SimpleBranchBuilder.cc
/*
 *
 * SimpleBranchBuilder.cc source template automatically generated by a class generator
 * Creation date : ven. mai 30 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/SimpleBranchBuilder.h"

#include "arborpfa/arbor/AlgorithmHeaders.h"

#include <algorithm>

using namespace pandora;

namespace arbor
{

pandora::StatusCode SimpleBranchBuilder::Build(Tree *pTree)
{
	const ObjectList &objectList(pTree->GetObjectList());

	BranchVector primaryBranchVector;
	std::map<Object*, bool> alreadyTouchedObjects;

	for(ObjectList::const_iterator iter = objectList.begin() , endIter = objectList.end() ; endIter != iter ; ++iter)
	{
		Object *pObject = *iter;
		alreadyTouchedObjects[pObject] = false;  // initialization for next loop

		Object *pPreviousObject = NULL;
		Connector *pCurrentBackwardConnector = NULL;
		pCurrentBackwardConnector = pObject->GetCurrentBackwardConnector();

		// we start from leaves
		if(!pObject->GetForwardConnectorList().empty() || NULL == pCurrentBackwardConnector)
			continue;

		if(pObject == pCurrentBackwardConnector->GetFirst())
			pPreviousObject = pCurrentBackwardConnector->GetSecond();
		else
			pPreviousObject = pCurrentBackwardConnector->GetFirst();

		Branch *pBranch = NULL;
		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborContentApi::Branch::Create(*this, pBranch, pTree));

		primaryBranchVector.push_back(pBranch);
		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->AddPrevious(pBranch, pObject));
		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->AddPrevious(pBranch, pPreviousObject));

		Object *pIterationObject = NULL;

		// iterate until seed to build a primary branch
		while(1)
		{
			pCurrentBackwardConnector = pPreviousObject->GetCurrentBackwardConnector();

			if(pCurrentBackwardConnector == NULL)
				break;

			if(pPreviousObject == pCurrentBackwardConnector->GetFirst())
				pIterationObject = pCurrentBackwardConnector->GetSecond();
			else
				pIterationObject = pCurrentBackwardConnector->GetFirst();

			PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->AddPrevious(pBranch, pIterationObject));
			pPreviousObject = pIterationObject;
			pIterationObject = NULL;
			pCurrentBackwardConnector = NULL;
		}

		// prepare for iteration from backward to forward for real branches in next loop
		pBranch->ResetIteration(BACKWARD);
	}

	// sort branches by decreasing length
	std::sort(primaryBranchVector.begin(), primaryBranchVector.end(), Branch::SORT_BY_DECREASING_LENGTH);

	for(BranchVector::iterator iter = primaryBranchVector.begin(), endIter = primaryBranchVector.end() ; endIter != iter ; ++iter)
	{
		Branch *pBranch = *iter;
		Object *pCurrentObjectInBranch = pBranch->GetCurrent();
		bool atLeastOneObject = false;

		Branch *pNewBranch = NULL;
		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborContentApi::Branch::Create(*this, pNewBranch, pTree));

		while(NULL != pCurrentObjectInBranch)
		{
			if(!alreadyTouchedObjects[pCurrentObjectInBranch])
			{
				PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->AddNext(pNewBranch, pCurrentObjectInBranch));
				atLeastOneObject = true;
				alreadyTouchedObjects[pCurrentObjectInBranch] = true;
			}

			pBranch->Next();
			pCurrentObjectInBranch = pBranch->GetCurrent();
		}

		if(!atLeastOneObject)
		{
			PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborContentApi::RemoveBranchFromTree(*this, pTree, pNewBranch));
			delete pNewBranch;
			continue;
		}

		PANDORA_THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, ArborContentApi::RemoveBranchFromTree(*this, pTree, pBranch));
	}

	primaryBranchVector.clear();
	alreadyTouchedObjects.clear();

	return STATUS_CODE_SUCCESS;
}

} 

