  /// \file Branch.cc
/*
 *
 * Branch.cc source template automatically generated by a class generator
 * Creation date : mar. juin 3 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/Branch.h"

// arbor
#include "arborpfa/content/Object.h"
#include "arborpfa/content/ArborHelper.h"

// std
#include <algorithm>

using namespace pandora;

namespace arbor
{

Branch::Branch()
 : m_pBranchSeed(NULL),
   m_pBranchLeaf(NULL),
   m_branchLength(0.f)
{

}

//--------------------------------------------------------------------------------------------------------------------

Branch::~Branch()
{
	m_objectVector.clear();
}

//--------------------------------------------------------------------------------------------------------------------

float Branch::GetLength() const
{
	return m_branchLength;
}

//--------------------------------------------------------------------------------------------------------------------

unsigned int Branch::GetNumberOfObjects() const
{
	return m_objectVector.size();
}

//--------------------------------------------------------------------------------------------------------------------

Object *Branch::GetBranchSeed() const
{
	return m_pBranchSeed;
}

//--------------------------------------------------------------------------------------------------------------------

Object *Branch::GetBranchLeaf() const
{
	return m_pBranchLeaf;
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::AddNext(Object *pNextObject)
{
	if(NULL == pNextObject)
		return STATUS_CODE_INVALID_PARAMETER;

	if(m_objectVector.empty())
	{
		m_objectVector.push_back(pNextObject);

		m_pBranchLeaf = pNextObject;
		m_pBranchSeed = pNextObject;

		m_currentIterationObject = m_objectVector.begin();

		return STATUS_CODE_SUCCESS;
	}
	else
	{
		const PseudoLayer pseudoLayer = pNextObject->GetPseudoLayer();
		Object *pLastObject = m_objectVector.back();
		const PseudoLayer lastPseudoLayer = pLastObject->GetPseudoLayer();

		if(pseudoLayer <= lastPseudoLayer)
			return STATUS_CODE_NOT_ALLOWED;

		if(!pNextObject->IsConnectedWith(pLastObject))
			return STATUS_CODE_NOT_ALLOWED;

		m_objectVector.push_back(pNextObject);

		m_pBranchLeaf = pNextObject;

		return STATUS_CODE_SUCCESS;
	}
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::AddPrevious(Object *pPreviousObject)
{
	if(NULL == pPreviousObject)
		return STATUS_CODE_INVALID_PARAMETER;

	if(m_objectVector.empty())
	{
		m_objectVector.push_back(pPreviousObject);

		m_pBranchLeaf = pPreviousObject;
		m_pBranchSeed = pPreviousObject;

		m_currentIterationObject = m_objectVector.begin();

		return STATUS_CODE_SUCCESS;
	}
	else
	{
		const PseudoLayer pseudoLayer = pPreviousObject->GetPseudoLayer();
		Object *pFirstObject = m_objectVector.front();
		const PseudoLayer firstPseudoLayer = pFirstObject->GetPseudoLayer();

		if(pseudoLayer >= firstPseudoLayer)
			return STATUS_CODE_NOT_ALLOWED;

		if(!pPreviousObject->IsConnectedWith(pFirstObject))
			return STATUS_CODE_NOT_ALLOWED;

		unsigned int distance = std::distance(m_objectVector.begin(), m_currentIterationObject);
		m_objectVector.insert(m_objectVector.begin(), pPreviousObject);
		m_currentIterationObject = m_objectVector.begin() + distance + 1;

		m_pBranchSeed = pPreviousObject;

		return STATUS_CODE_SUCCESS;
	}
}

//--------------------------------------------------------------------------------------------------------------------

bool Branch::Contains(Object *pObject) const
{
	return (std::find(m_objectVector.begin(), m_objectVector.end(), pObject) != m_objectVector.end());
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::FitBranch(pandora::ClusterHelper::ClusterFitResult &clusterFitResult) const
{
	if(m_objectVector.size() < 2)
		return STATUS_CODE_FAILURE;

	CartesianPointList pointList;

	for(ObjectVector::const_iterator iter = m_objectVector.begin(), endIter = m_objectVector.end() ; endIter != iter ; ++iter)
	{
		pointList.push_back((*iter)->GetPosition());
	}

	return ArborHelper::FitPoints(pointList, clusterFitResult);
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::Next()
{
	if(m_objectVector.end() != m_currentIterationObject)
	 m_currentIterationObject++;

	return STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::Previous()
{
	if(m_objectVector.begin() != m_currentIterationObject)
	 m_currentIterationObject--;

	return STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

Object *Branch::GetCurrent() const
{
	if(m_objectVector.empty())
		return NULL;

	if(m_objectVector.end() == m_currentIterationObject)
		return NULL;

	if(NULL == (*m_currentIterationObject))
		return NULL;
	else
		return (*m_currentIterationObject);
}

//--------------------------------------------------------------------------------------------------------------------

pandora::StatusCode Branch::ResetIteration(ConnectorDirection direction)
{
	if(!m_objectVector.empty())
	{
		if(BACKWARD == direction)
		{
			m_currentIterationObject = m_objectVector.begin();
		}
		else
		{
			m_currentIterationObject = m_objectVector.end();
		}
		return STATUS_CODE_SUCCESS;
	}
	else
	{
	 return STATUS_CODE_NOT_INITIALIZED;
	}
}


} 

