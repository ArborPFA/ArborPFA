  /// \file SdhcalEnergyFunction.cc
/*
 *
 * SdhcalEnergyFunction.cc source template automatically generated by a class generator
 * Creation date : sam. sept. 27 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/SdhcalEnergyFunction.h"

#include "Objects/CaloHit.h"
#include "Helpers/XmlHelper.h"

namespace arbor
{

pandora::StatusCode SdhcalEnergyFunction::GetEnergy(const pandora::CaloHitList *const pCaloHitList, float &energy) const
{
	unsigned int NHit = pCaloHitList->size();
	unsigned int NHit1 = 0;
	unsigned int NHit2 = 0;
	unsigned int NHit3 = 0;

	for(pandora::CaloHitList::const_iterator iter = pCaloHitList->begin() , endIter = pCaloHitList->end() ; endIter != iter ; ++iter)
	{
		pandora::CaloHit *pCaloHit = *iter;

		if(m_energyThresholdValues.at(0) == pCaloHit->GetInputEnergy())
			NHit1++;
		else if(m_energyThresholdValues.at(1) == pCaloHit->GetInputEnergy())
			NHit2++;
		else if(m_energyThresholdValues.at(2) == pCaloHit->GetInputEnergy())
			NHit3++;
		else
		{
			std::cout << "Not known threshold value " << pCaloHit->GetInputEnergy() << std::endl;
			return pandora::STATUS_CODE_INVALID_PARAMETER;
		}
	}

	const float alpha = m_energyConstantParameters.at(0) + m_energyConstantParameters.at(1)*NHit + m_energyConstantParameters.at(2)*NHit*NHit;
	const float beta  = m_energyConstantParameters.at(3) + m_energyConstantParameters.at(4)*NHit + m_energyConstantParameters.at(5)*NHit*NHit;
	const float gamma = m_energyConstantParameters.at(6) + m_energyConstantParameters.at(7)*NHit + m_energyConstantParameters.at(8)*NHit*NHit;

	energy = NHit1*alpha + NHit2*beta + NHit3*gamma;

	return pandora::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------

pandora::StatusCode SdhcalEnergyFunction::GetEnergyResolution(float energy, float &energyResolution) const
{
	energyResolution =
			std::sqrt( m_resolutionEnergyFactor*m_resolutionEnergyFactor/energy
					       + m_resolutionConstantFactor*m_resolutionConstantFactor
					       + m_resolutionEnergySquareFactor*m_resolutionEnergySquareFactor/(energy*energy) );

	return pandora::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------------

pandora::StatusCode SdhcalEnergyFunction::ReadSettings(const pandora::TiXmlHandle &xmlHandle)
{
	std::cout << "SdhcalEnergyFunction::ReadSettings()" << std::endl;

 PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
     "ResolutionEnergyFactor", m_resolutionEnergyFactor));

 PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
     "ResolutionConstantFactor", m_resolutionConstantFactor));

 PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadValue(xmlHandle,
     "ResolutionEnergySquareFactor", m_resolutionEnergySquareFactor));

 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadVectorOfValues(xmlHandle,
 	   "EnergyConstantParameters", m_energyConstantParameters));

 if(9 != m_energyConstantParameters.size())
 {
 	std::cout << "SdhcalEnergyFunction::ReadSettings(): Excepted 9 parameters for energy constant parameters. " <<
 			m_energyConstantParameters.size()	<< " received." << std::endl;

 	return pandora::STATUS_CODE_INVALID_PARAMETER;
 }

 PANDORA_RETURN_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, pandora::XmlHelper::ReadVectorOfValues(xmlHandle,
 	   "EnergyThresholdValues", m_energyThresholdValues));

 if(3 != m_energyThresholdValues.size())
 {
 	std::cout << "SdhcalEnergyFunction::ReadSettings(): Excepted 3 parameters for threshold values. " <<
 			m_energyThresholdValues.size()	<< " received." << std::endl;

 	return pandora::STATUS_CODE_INVALID_PARAMETER;
 }

	return pandora::STATUS_CODE_SUCCESS;
}


} 

