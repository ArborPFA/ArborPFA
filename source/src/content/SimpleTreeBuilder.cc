  /// \file SimpleTreeBuilder.cc
/*
 *
 * SimpleTreeBuilder.cc source template automatically generated by a class generator
 * Creation date : ven. mai 30 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#include "arborpfa/content/SimpleTreeBuilder.h"

// arbor
#include "arborpfa/content/Object.h"
#include "arborpfa/content/Connector.h"

// std
#include <algorithm>

namespace arbor
{

pandora::StatusCode SimpleTreeBuilder::Build(Object *pSeedObject, ObjectList &treeObjectList)
{
	if(NULL == pSeedObject)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	treeObjectList.clear();
	treeObjectList.insert(pSeedObject);

	PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RecursiveBuilding(pSeedObject, treeObjectList));

	return pandora::STATUS_CODE_SUCCESS;
}



pandora::StatusCode SimpleTreeBuilder::RecursiveBuilding(Object *pCurrentObject, ObjectList &treeObjectList)
{
	if(NULL == pCurrentObject)
		return pandora::STATUS_CODE_INVALID_PARAMETER;

	const ConnectorList &forwardConnectors = pCurrentObject->GetForwardConnectorList();

	if(forwardConnectors.empty())
		return pandora::STATUS_CODE_SUCCESS;

	for(ConnectorList::const_iterator iter = forwardConnectors.begin() , endIter = forwardConnectors.end() ; endIter != iter ; ++iter)
	{
		Connector *pConnector = *iter;
		Object *pOtherObject = NULL;

		if(pConnector->GetFirst() == pCurrentObject)
			pOtherObject = pConnector->GetSecond();
		else
			pOtherObject = pConnector->GetFirst();

		if(std::find(treeObjectList.begin(), treeObjectList.end(), pOtherObject) != treeObjectList.end())
			continue;

		Connector *pBackwardConnector = pOtherObject->GetCurrentBackwardConnector();

		treeObjectList.insert(pOtherObject);
		PANDORA_THROW_RESULT_IF(pandora::STATUS_CODE_SUCCESS, !=, this->RecursiveBuilding(pOtherObject, treeObjectList));
	}

	return pandora::STATUS_CODE_SUCCESS;
}

} 

