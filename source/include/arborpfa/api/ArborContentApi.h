  /// \file ArborContentApi.h
/*
 *
 * ArborContentApi.h header template automatically generated by a class generator
 * Creation date : dim. fï¿½vr. 9 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORCONTENTAPI_H
#define ARBORCONTENTAPI_H

// pandora
#include "Pandora/PandoraInternal.h"
#include "Pandora/StatusCodes.h"

// arborpfa
#include "arborpfa/arbor/ArborTypes.h"
#include "arborpfa/content/ArborObject.h"

namespace arborpfa
{

class ArborAlgorithm;
class ArborAlgorithmFactory;
class ArborObject;

/** 
 * @brief ArborContentApi class
 */ 
class ArborContentApi 
{
 public:

//		/**
//			*
//			*/
//	 class Connector
//	 {
//	  public:
//
//				/**
//					*
//					*/
//				static pandora::StatusCode Create(const ArborAlgorithm &algorithm, ArborObjectPair *pPair, float weight = 1.f);
//
//				/**
//					*
//					*/
//				static pandora::StatusCode Create(const ArborAlgorithm &algorithm, ArborObjectPair *pPair, arborpfa::Connector *&pConnector, float weight = 1.f);
//
//				/**
//					*
//					*/
//				static pandora::StatusCode Create(const ArborAlgorithm &algorithm, ArborObject *pObj1, ArborObject *pObj2, float weight = 1.f);
//
//				/**
//					*
//					*/
//				static pandora::StatusCode Create(const ArborAlgorithm &algorithm, ArborObject *pObj1, ArborObject *pObj2, arborpfa::Connector *&pConnector, float weight = 1.f);
//
//	 };

//	 class ArborObject
//	 {
//	  public:
//
//	 		/**
//	 		 *
//	 		 */
//	 	 static pandora::StatusCode Create(const ArborAlgorithm &algorithm, arborpfa::ArborObject *&pArborObject, arborpfa::ArborObject::Type type, void *pInputObject);
//	 };

	 /*
	  * Connector related methods
	  */
//
//	 static pandora::StatusCode GetCurrentConnectorList(const ArborAlgorithm &arborAlgorithm, const ConnectorList *&pConnectorList);
//
//
//	 static pandora::StatusCode GetCurrentConnectorList(const ArborAlgorithm &arborAlgorithm, const ConnectorList *&pConnectorList, std::string &listName);
//
//
//	 static pandora::StatusCode GetCurrentConnectorListName(const ArborAlgorithm &arborAlgorithm, std::string &listName);
//
//
//	 static pandora::StatusCode GetConnectorList(const ArborAlgorithm &arborAlgorithm, const std::string &listName, const ConnectorList *&pConnectorList);
//
//
//  static pandora::StatusCode CreateTemporaryConnectorListAndSetCurrent(const ArborAlgorithm &algorithm, const ConnectorList *&pConnectorList, std::string &temporaryListName);
//
//
//	 static pandora::StatusCode SaveConnectorList(const ArborAlgorithm &algorithm, const std::string &newListName);
//
//
//	 static pandora::StatusCode SaveConnectorList(const ArborAlgorithm &algorithm, const std::string &newConnectorListName, const ConnectorList &connectorsToSave);
//
//
//	 static pandora::StatusCode SaveConnectorList(const ArborAlgorithm &algorithm, const std::string &oldConnectorListName, const std::string &newConnectorListName);
//
//
//  static pandora::StatusCode SaveConnectorList(const ArborAlgorithm &algorithm, const std::string &oldConnectorListName, const std::string &newConnectorListName, const ConnectorList &connectorsToSave);
//
//
//	 static pandora::StatusCode ReplaceCurrentConnectorList(const ArborAlgorithm &algorithm, const std::string &newListName);
//
//
//  static pandora::StatusCode TemporarilyReplaceCurrentConnectorList(const ArborAlgorithm &algorithm, const std::string &newConnectorListName);


//  static pandora::StatusCode DeleteConnector(const ArborAlgorithm &algorithm, arborpfa::Connector *pConnector);
//
//
//  static pandora::StatusCode DeleteConnector(const ArborAlgorithm &algorithm, arborpfa::Connector *pConnector, const std::string &connectorListName);
//
//
//  static pandora::StatusCode DeleteConnectors(const ArborAlgorithm &algorithm, const ConnectorList &connectorList);
//
//
//  static pandora::StatusCode DeleteConnectors(const ArborAlgorithm &algorithm, const ConnectorList &connectorList, const std::string &connectorListName);


//	 static pandora::StatusCode DropCurrentConnectorList(const ArborAlgorithm &algorithm);



	 /*
	  * ArborObject related methods
	  */

//	 static pandora::StatusCode GetCurrentArborObjectList(const ArborAlgorithm &arborAlgorithm, const ArborObjectList *&pArborObjectList);
//
//
//	 static pandora::StatusCode GetCurrentArborObjectList(const ArborAlgorithm &arborAlgorithm, const ArborObjectList *&pArborObjectList, std::string &listName);
//
//
//	 static pandora::StatusCode GetCurrentArborObjectListName(const ArborAlgorithm &arborAlgorithm, std::string &listName);
//
//
//	 static pandora::StatusCode GetArborObjectList(const ArborAlgorithm &arborAlgorithm, const std::string &listName, const ArborObjectList *&pArborObjectList);
//
//
//  static pandora::StatusCode CreateTemporaryArborObjectListAndSetCurrent(const ArborAlgorithm &algorithm, const ArborObjectList *&pArborObjectList, std::string &temporaryListName);
//
//
//	 static pandora::StatusCode SaveArborObjectList(const ArborAlgorithm &algorithm, const std::string &newListName);
//
//
//	 static pandora::StatusCode SaveArborObjectList(const ArborAlgorithm &algorithm, const std::string &newArborObjectListName, const ArborObjectList &objectsToSave);
//
//
//	 static pandora::StatusCode SaveArborObjectList(const ArborAlgorithm &algorithm, const std::string &oldArborObjectListName, const std::string &newArborObjectListName);
//
//
//  static pandora::StatusCode SaveArborObjectList(const ArborAlgorithm &algorithm, const std::string &oldArborObjectListName, const std::string &newArborObjectListName, const ArborObjectList &connectorsToSave);
//
//
//	 static pandora::StatusCode ReplaceCurrentArborObjectList(const ArborAlgorithm &algorithm, const std::string &newListName);
//
//
//  static pandora::StatusCode TemporarilyReplaceCurrentArborObjectList(const ArborAlgorithm &algorithm, const std::string &newArborObjectListName);
//
//
//  static pandora::StatusCode DropCurrentArborObjectList(const ArborAlgorithm &algorithm);
//
//	 // TODO implement the Api for connectors (connect, disconnect, weight, final, ...)
//
//
//  static pandora::StatusCode RunArborObjectAlgorithm(const ArborAlgorithm &algorithm, const std::string &algorithmName, const ArborObjectList *&pArborObjectList);
//
//
//  static pandora::StatusCode RunArborObjectAlgorithm(const ArborAlgorithm &algorithm, const std::string &algorithmName, const ArborObjectList *&pArborObjectList, std::string &newListName);

 protected:

}; 

} 

#endif  //  ARBORCONTENTAPI_H
