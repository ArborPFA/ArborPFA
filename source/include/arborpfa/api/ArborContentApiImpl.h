  /// \file ArborContentApiImpl.h
/*
 *
 * ArborContentApiImpl.h header template automatically generated by a class generator
 * Creation date : dim. fï¿½vr. 9 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORCONTENTAPIIMPL_H
#define ARBORCONTENTAPIIMPL_H

#include "Pandora/PandoraInternal.h"
#include "Pandora/StatusCodes.h"

#include "arborpfa/arbor/ArborTypes.h"
#include "arborpfa/content/Object.h"

namespace arbor
{

class ArborAlgorithm;
class Arbor;

/** 
 * @brief ArborContentApiImpl class
 */ 
class ArborContentApiImpl 
{
 public:

		/**
		 *
		 */
		pandora::StatusCode CreateObject(arbor::Object *&pObject, pandora::CaloHit *pInputCaloHit) const;

		/**
		 *
		 */
		pandora::StatusCode CreateCluster(arbor::Cluster *&pCluster, arbor::Object *pSeedObject) const;

		/**
		 *
		 */
		pandora::StatusCode CreateBranch(arbor::Branch *&pBranch, arbor::Tree *pTree) const;

//-----------------------------------------------------------------------------------------------------------------------

		/**
		 *
		 */
	 pandora::StatusCode GetCurrentObjectList(const ObjectList *&pObjectList, std::string &listName) const;

		/**
		 *
		 */
	 pandora::StatusCode GetCurrentObjectListName(std::string &listName) const;

		/**
		 *
		 */
	 pandora::StatusCode GetObjectList(const std::string &listName, const ObjectList *&pObjectList) const;

		/**
		 *
		 */
  pandora::StatusCode CreateTemporaryObjectListAndSetCurrent(const ArborAlgorithm &algorithm, const ObjectList *&pObjectList, std::string &temporaryListName) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveObjectList(const std::string &newListName) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveObjectList(const std::string &newObjectListName, const ObjectList &connectorsToSave) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveObjectList(const std::string &oldObjectListName, const std::string &newObjectListName) const;

		/**
		 *
		 */
  pandora::StatusCode SaveObjectList(const std::string &oldObjectListName, const std::string &newObjectListName, const ObjectList &objectsToSave) const;

		/**
		 *
		 */
	 pandora::StatusCode ReplaceCurrentObjectList(const ArborAlgorithm &algorithm, const std::string &newListName) const;

		/**
		 *
		 */
  pandora::StatusCode TemporarilyReplaceCurrentObjectList(const std::string &newObjectListName) const;

  /**
   *
   */
  pandora::StatusCode DropCurrentObjectList() const;

  /**
   *
   */
  pandora::StatusCode RemoveAllConnections(const ObjectList &objectList) const;

//-----------------------------------------------------------------------------------------------------------------------

		/**
		 *
		 */
	 pandora::StatusCode GetCurrentClusterList(const arbor::ClusterList *&pClusterList, std::string &listName) const;

		/**
		 *
		 */
	 pandora::StatusCode GetCurrentClusterListName(std::string &listName) const;

		/**
		 *
		 */
	 pandora::StatusCode GetClusterList(const std::string &listName, const arbor::ClusterList *&pClusterList) const;

		/**
		 *
		 */
  pandora::StatusCode CreateTemporaryClusterListAndSetCurrent(const ArborAlgorithm &algorithm, const ClusterList *&pClusterList, std::string &temporaryListName) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveClusterList(const std::string &newListName) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveClusterList(const std::string &newClusterListName, const ClusterList &connectorsToSave) const;

		/**
		 *
		 */
	 pandora::StatusCode SaveClusterList(const std::string &oldClusterListName, const std::string &newClusterListName) const;

		/**
		 *
		 */
  pandora::StatusCode SaveClusterList(const std::string &oldClusterListName, const std::string &newClusterListName, const arbor::ClusterList &objectsToSave) const;

		/**
		 *
		 */
	 pandora::StatusCode ReplaceCurrentClusterList(const ArborAlgorithm &algorithm, const std::string &newListName) const;

		/**
		 *
		 */
  pandora::StatusCode TemporarilyReplaceCurrentClusterList(const std::string &newClusterListName) const;

  /**
   *
   */
  pandora::StatusCode DropCurrentClusterList() const;

  /**
   *
   */
  pandora::StatusCode DeleteCluster(arbor::Cluster *pCluster) const;

  /**
   *
   */
  pandora::StatusCode MergeAndDeleteClusters(arbor::Cluster *pClusterToEnlarge, arbor::Cluster *pClusterToDelete) const;

  //-----------------------------------------------------------------------------------------------------------------------

  /**
   *
   */
  pandora::StatusCode RemoveBranchFromTree(arbor::Tree *pTree, arbor::Branch *pBranch) const;

  /**
   *
   */
  pandora::StatusCode MoveTree(arbor::Cluster *pOldCluster, arbor::Cluster *pNewCluster, Tree *pTree) const;

  /**
   *
   */
  pandora::StatusCode AddPreviousObjectToBranch(arbor::Branch *pBranch, arbor::Object *pObject) const;

  /**
   *
   */
  pandora::StatusCode AddNextObjectToBranch(arbor::Branch *pBranch, arbor::Object *pObject) const;

  /**
   *
   */
  pandora::StatusCode RunObjectCreationAlgorithm(const ArborAlgorithm &arborAlgorithm, const std::string &arborObjectAlgorithmName,
  		const arbor::ObjectList *&pObjectList, std::string &newObjectListName) const;

  /**
   *
   */
  pandora::StatusCode RunClusterCreationAlgorithm(const ArborAlgorithm &arborAlgorithm, const std::string &arborClusterAlgorithmName,
  		const arbor::ClusterList *&pClusterList, std::string &newClusterListName) const;


  // Energy function related methods

	/**
		*  @brief  Get the current energy function name
		*
		*  @param  energyFunctionName  the current energy function name to get by reference
		*/
 pandora::StatusCode GetCurrentEnergyFunctionName(std::string &energyFunctionName) const;

 /**
  *  @brief  Set the current energy function by name
  *
  *  @param  energyFunctionName  the energy function name
  */
 pandora::StatusCode SetCurrentEnergyFunction(const std::string &energyFunctionName) const;

 /**
  *  @brief  Get the cluster energy estimated from the current energy function
  *
  *  @param  pCluster  the address of the cluster from which we extract the energy
  *  @param  energy  the estimated energy to get by reference
  */
 pandora::StatusCode GetEnergy(const arbor::Cluster *pCluster, float &energy) const;

 /**
  *  @brief  Get the cluster energy estimated from a given energy function
  *
  *  @param  energyFunctionName  the energy function name
  *  @param  pCluster  the address of the cluster from which we extract the energy
  *  @param  energy  the estimated energy to get by reference
  */
 pandora::StatusCode GetEnergy(const std::string &energyFunctionName, const arbor::Cluster *pCluster, float &energy) const;

 /**
  *  @brief  Get the cluster energy estimated from the current energy function
  *
  *  @param  pCaloHitList  the address of the calo hit list from which we extract the energy
  *  @param  energy  the estimated energy to get by reference
  */
 pandora::StatusCode GetEnergy(const pandora::CaloHitList *const pCaloHitList, float &energy) const;

 /**
  *  @brief  Get the calo hit list energy estimated from a given energy function
  *
  *  @param  energyFunctionName  the energy function name
  *  @param  pCaloHitList  the address of the calo hit list from which we extract the energy
  *  @param  energy  the estimated energy to get by reference
  */
 pandora::StatusCode GetEnergy(const std::string &energyFunctionName, const pandora::CaloHitList *const pCaloHitList, float &energy) const;

 /**
  *  @brief  Get the energy resolution at a given energy from the current energy function
  *
  *  @param  energy  the energy reference point for the energy resolution
  *  @param  energyResolution  the energy resolution to get by reference
  */
 pandora::StatusCode GetEnergyResolution(float energy,		float &energyResolution) const;

 /**
  *  @brief  Get the energy resolution at a given energy from the given energy function
  *
  *  @param  energyFunctionName  the energy function name
  *  @param  energy  the energy reference point for the energy resolution
  *  @param  energyResolution  the energy resolution to get by reference
  */
 pandora::StatusCode GetEnergyResolution(const std::string &energyFunctionName, float energy,		float &energyResolution) const;

 /**
  *
  */
 pandora::StatusCode InitializeReclustering(const ArborAlgorithm &algorithm, const pandora::TrackList &trackList,
 		const arbor::ClusterList &clusterList, std::string &originalClusterListName) const;

 /**
  *
  */
 pandora::StatusCode EndReclustering(const ArborAlgorithm &algorithm, const std::string &selectedClusterListName,
 		const std::string &originalTrackListName) const;

 private:

		/**
			* @brief  Constructor with arbor ptr instance
			*/
		ArborContentApiImpl(Arbor *pArbor);

		Arbor       *m_pArbor;

		friend class Arbor;
}; 

} 

#endif  //  ARBORCONTENTAPIIMPL_H
