  /// \file KappaConnectorCleaningAlgorithm.h
/*
 *
 * KappaConnectorCleaningAlgorithm.h header template automatically generated by a class generator
 * Creation date : ven. sept. 19 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef KAPPACONNECTORCLEANINGALGORITHM_H
#define KAPPACONNECTORCLEANINGALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

#include "TH1D.h"

namespace arbor
{

/** 
 * @brief KappaConnectorCleaningAlgorithm class
 */ 
class KappaConnectorCleaningAlgorithm : public ArborAlgorithm 
{
public:

/**
	* @brief Factory class for instantiating algorithm
	*/
class Factory : public ArborAlgorithmFactory
{
	public:
		ArborAlgorithm *CreateArborAlgorithm() const;
};

/**
	* @brief Run the algorithm
	*/
pandora::StatusCode RunArborAlgorithm();

/**
	* @brief Read settings from Xml handler
	*/
pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

/**
 *
 */
pandora::StatusCode GlobalCleaning(const ObjectList *const pObjectList);

/**
 *
 */
pandora::StatusCode OrderedCleaning(const ObjectList *const pObjectList);


protected:

	float          m_backwardConnectorWeight;
	float          m_forwardConnectorWeight;
	float          m_orderParameterAnglePower;
	float          m_orderParameterDistancePower;
	unsigned int  m_referenceDirectionDepth;
	unsigned int  m_referenceDirectionMaximumForwardLayer;
	int            m_cleaningStrategy;
	float          m_orderParameterCut;

	float          m_kappaNormFactor;

	TH1 *m_pOrderParameterHisto;
	TH1 *m_pBestOrderParameterHisto;
};

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *KappaConnectorCleaningAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new KappaConnectorCleaningAlgorithm();
}

} 

#endif  //  KAPPACONNECTORCLEANINGALGORITHM_H
