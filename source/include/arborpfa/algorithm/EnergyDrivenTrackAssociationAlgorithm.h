  /// \file EnergyDrivenTrackAssociationAlgorithm.h
/*
 *
 * EnergyDrivenTrackAssociationAlgorithm.h header template automatically generated by a class generator
 * Creation date : mer. mars 18 2015
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ENERGYDRIVENTRACKASSOCIATIONALGORITHM_H
#define ENERGYDRIVENTRACKASSOCIATIONALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"
#include "arborpfa/content/ArborHelper.h"

// pandora
#include "Pandora/PandoraInternal.h"

namespace arbor
{

/** 
 * @brief EnergyDrivenTrackAssociationAlgorithm class
 */ 
class EnergyDrivenTrackAssociationAlgorithm : public ArborAlgorithm 
{
public:

	/**
		* @brief Factory class for instantiating algorithm
		*/
	class Factory : public ArborAlgorithmFactory
	{
		public:
			ArborAlgorithm *CreateArborAlgorithm() const;
	};

	/**
		* @brief Run the algorithm
		*/
	pandora::StatusCode RunArborAlgorithm();

	/**
		* @brief Read settings from Xml handler
		*/
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

protected:

	// algorithm tools
	typedef std::map<pandora::Track*, arbor::ClusterList> TrackToClusterListMap;
	typedef std::map<float, arbor::Cluster *> DistanceToClusterMap;

	/**
	 *
	 */
	pandora::StatusCode RemoveCurrentTrackAssociations(const arbor::ClusterList *pClusterList) const;

	/**
	 *
	 */
	pandora::StatusCode ReduceClusterList(DistanceToClusterMap &distanceToClusterMap, arbor::ClusterVector &reducedClusterVector, float distanceCut, float projection) const;

	/**
	 *
	 */
	pandora::StatusCode CreateAssociation(pandora::Track *pTrack, const arbor::ClusterVector &clusterVector);


	TrackToClusterListMap   m_trackToClusterListMap;
	std::string             m_energyFunctionName;
	std::string             m_trackListName;
	bool               		m_shouldMergeChargedTrees;
	unsigned int       	m_trackToClusterNLayersCut;
	unsigned int       	m_firstInteractingLayerNSeedCut;
	float               	m_trackToClusterDistanceCut1;
	float               	m_trackToClusterDistanceCut2;
	float               	m_trackToClusterProjectionCut;
	float               	m_chi2SigmaFactor;
	float               	m_trackClusterChi2Cut;

};

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *EnergyDrivenTrackAssociationAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new EnergyDrivenTrackAssociationAlgorithm();
}

} 

#endif  //  ENERGYDRIVENTRACKASSOCIATIONALGORITHM_H
