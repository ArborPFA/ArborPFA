/*
 *
 * ArborConnectorClusteringAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 20 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORCONNECTORCLUSTERINGALGORITHM_H
#define ARBORCONNECTORCLUSTERINGALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

#include "arborpfa/arbor/AlgorithmHeaders.h"


namespace arborpfa {

/** 
 * @brief ArborConnectorClusteringAlgorithm class
 */ 
class ArborConnectorClusteringAlgorithm : public ArborAlgorithm 
{
 public:

		/**
			* @brief Factory class for instantiating algorithm
			*/
		class Factory : public ArborAlgorithmFactory
		{
			public:
				ArborAlgorithm *CreateArborAlgorithm() const;
		};

		/**
			* @brief Run the algorithm
			*/
		pandora::StatusCode Run();

		/**
			* @brief Read settings from Xml handler
			*/
		pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

		/**
		 * @brief Create all th arbor objects. </br>
		 * These objects are used as points to connect together. </br>
		 * Objects can be, for example, an entry point of a track, a simple calo hit or a small cluster
		 *
		 * @param pClusterList the cluster list. </br>
		 * @param pTrackList the track list. Entry points in the Ecal are identified as arbor objects
		 */
		pandora::StatusCode CreateArborObjects(const pandora::ClusterList *pClusterList,
                                           const pandora::TrackList *pTrackList);

		/**
		 * @brief Seed the initial connectors. </br>
		 * Part of them will be removed/sorted/re-weighted in the following part </br>
		 * Called after arbor object creation
		 */
		pandora::StatusCode SeedInitialConnectors();

		/**
		 * @brief Clean the connectors. </br>
		 * Keep at least one connector in the backward direction (arbor principle) by taking a decision among
		 * all backward connectors. </br>
		 * Called after arbor objects creation and connector seeding.
		 */
		pandora::StatusCode CleanConnectors();

		/**
		 * @brief Cluster all the connected arbor objects. </br>
		 * Called after connector cleaning
		 */
		pandora::StatusCode DoClustering();

//-----------------------------------------------------------------------------------------------------------------

		/**
		 *
		 */
//		pandora::StatusCode ComputeIsolatedFlag(ArborObject *pArborObject);

		/**
		 *
		 */
		pandora::StatusCode CleanMipConnectors(MipPointObject *pMipPointObject);

		/**
		 *
		 */
		pandora::StatusCode ComputeOrderParameter(const ArborObject *pArborObject1, const ArborObject *pArborObject2, const pandora::CartesianVector &referenceVector, float &orderParameter);

		/**
		 *
		 */
		pandora::StatusCode ComputeMeanBackwardDirection(const ArborObject *pArborObject, pandora::CartesianVector &meanBackwardDirection, unsigned int &nbOfBackwardConnections) const;

		/**
		 *
		 */
		pandora::StatusCode IsBackwardConnector(const ArborObject *const pArborObject, const Connector *pConnector, bool &isBackwardConnector) const;

		/**
		 *
		 */
		pandora::StatusCode RecursiveClustering(pandora::Cluster *pClusterToEnlarge, ArborObject *pArborObject);

		/**
		 *
		 */
		pandora::StatusCode DrawConnectors() const;

		/**
		 *
		 */
		pandora::StatusCode DrawEveArrow(const pandora::CartesianVector &from, const pandora::CartesianVector &to, int color) const;

		/**
		 * @brief Clear all content, all the objects allocated on the heap.
		 */
		pandora::StatusCode ClearContent();

		/**
		 *
		 */
		pandora::StatusCode CreateInitialCluster(ArborObject *pArborObject, pandora::Cluster *&pCluster);

		/**
		 *
		 */
		pandora::StatusCode MergeObjectContentInCluster(ArborObject *pArborObject, pandora::Cluster *pCluster);


 protected:

		// list names
		std::string        m_inputClusterListName;
		std::string        m_trackListName;

		// algorithm tools
		ArborObjectList                                    m_arborObjectList;
		ArborObjectList                                    m_alreadyUsedObjectsForClustering;
		TrackObjectList                                    m_trackObjectList;
		unsigned int                                     m_iteration;
		ArborObjectList                                    m_currentClusterObjectList;

		// algorithm parameters
		unsigned int       m_maximumClusterSizeForObjects;
		float               m_maximumForwardDistanceForConnectionCoarse;
		float               m_maximumForwardDistanceForConnectionFine;
		float               m_maximumTransverseDistanceForConnectionCoarse;
		float               m_maximumTransverseDistanceForConnectionFine;
		float               m_orderParameterAnglePower;
		float               m_orderParameterDistancePower;
		bool                m_allowForwardConnectionForIsolatedObjects;
		bool                m_showConnectors;
		bool                m_shouldUseIsolatedObjects;
		unsigned int       m_maximumNumberOfKeptConnectors;

}; 

inline ArborAlgorithm *ArborConnectorClusteringAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new ArborConnectorClusteringAlgorithm();
}

} 

#endif  //  ARBORCONNECTORCLUSTERINGALGORITHM_H
