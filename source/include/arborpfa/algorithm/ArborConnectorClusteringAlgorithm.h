/*
 *
 * ArborConnectorClusteringAlgorithm.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 20 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORCONNECTORCLUSTERINGALGORITHM_H
#define ARBORCONNECTORCLUSTERINGALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

#include "arborpfa/arbor/AlgorithmHeaders.h"

#include "TEveElement.h"

namespace arbor
{

/** 
 * @brief ArborConnectorClusteringAlgorithm class
 */ 
class ArborConnectorClusteringAlgorithm : public ArborAlgorithm
{
 public:

		/**
			* @brief Factory class for instantiating algorithm
			*/
		class Factory : public ArborAlgorithmFactory
		{
			public:
				ArborAlgorithm *CreateArborAlgorithm() const;
		};

		/**
			* @brief Run the algorithm
			*/
		pandora::StatusCode RunArborAlgorithm();

		/**
			* @brief Read settings from Xml handler
			*/
		pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

		/**
		 * @brief Seed the initial connectors. </br>
		 * Part of them will be removed/sorted/re-weighted in the following part
		 */
		pandora::StatusCode SeedInitialConnectors();

		/**
		 * @brief Clean the connectors. </br>
		 * Keep at least one connector in the backward direction (arbor principle) by taking a decision among
		 * all backward connectors. </br>
		 * Called after connector seeding.
		 */
		pandora::StatusCode CleanConnectors();

		/**
		 * @brief Cluster all the connected arbor objects. </br>
		 * Called after connector cleaning
		 */
		pandora::StatusCode DoClustering();

		/**
		 *
		 */
		pandora::StatusCode DrawConnectors() const;

		/**
		 *
		 */
		pandora::StatusCode DrawEveArrow(TEveElement *pParentCollection, const pandora::CartesianVector &from, const pandora::CartesianVector &to, int color) const;

 protected:

		// algorithm tools
		const ObjectList                            *m_pObjectList;

		// algorithm parameters
		unsigned int       m_referenceDirectionDepth;
		unsigned int       m_referenceDirectionMaximumForwardLayer;

		float               m_maximumDistanceForConnectionFine;
		float               m_maximumDistanceForConnectionCoarse;
		float               m_angleForInitialConnectionFine;
		float               m_angleForInitialConnectionCoarse;
		float               m_orderParameterAnglePower;
		float               m_orderParameterDistancePower;
		float               m_forwardConnectorWeight;
		float               m_backwardConnectorWeight;

		bool                m_allowForwardConnectionForIsolatedObjects;
		bool                m_showConnectors;
		bool                m_shouldUseIsolatedObjects;
		bool                m_shouldRunSecondCleaning;
		bool                m_shouldSelectNearestObjectWhileCleaning;
}; 

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *ArborConnectorClusteringAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new ArborConnectorClusteringAlgorithm();
}

} 

#endif  //  ARBORCONNECTORCLUSTERINGALGORITHM_H
