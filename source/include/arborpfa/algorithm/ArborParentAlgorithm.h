  /// \file ArborParentAlgorithm.h
/*
 *
 * ArborParentAlgorithm.h header template automatically generated by a class generator
 * Creation date : ven. mai 23 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#ifndef ARBORPARENTALGORITHM_H
#define ARBORPARENTALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

namespace arbor
{

/** 
 * @brief ArborParentAlgorithm class
 */ 
class ArborParentAlgorithm : public ArborAlgorithm
{
 public:

	/**
		* @brief Factory class for instantiating algorithm
		*/
	class Factory : public ArborAlgorithmFactory
	{
		public:
			ArborAlgorithm *CreateArborAlgorithm() const;
	};

	/**
		* @brief Run the algorithm
		*/
	pandora::StatusCode RunArborAlgorithm();

	/**
		* @brief Read settings from Xml handler
		*/
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

 protected:

	std::string     m_inputCaloHitListName;                   ///< The name of the input calo hit list, containing the hits used for arbor algorithms

	std::string     m_objectCreationAlgorithmName;      ///< The name of the arbor object creation algorithm to run
 std::string     m_clusterCreationAlgorithmName;

 std::string     m_clusterListName;
 std::string     m_objectListName;                    ///< The name under which to save the new arbor object list or the name of the input list cluster creation

 bool            m_restoreOriginalCaloHitList;        ///< Whether to restore the original calo hit list as the "current" list upon completion
 bool            m_restoreOriginalObjectList;        ///< Whether to restore the original arbor object list as the "current" list upon completion
 bool            m_replaceCurrentObjectList;     ///< Whether to subsequently use the new arbor object list as the "current" list
 bool            m_replaceCurrentClusterList;     ///< Whether to subsequently use the new arbor cluster list as the "current" list

 pandora::StringVector    m_associationAlgorithmList;
};

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *ArborParentAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new ArborParentAlgorithm();
}

} 

#endif  //  ARBORPARENTALGORITHM_H
