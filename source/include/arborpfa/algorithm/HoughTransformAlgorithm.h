/*
 *
 * HoughTransformAlgorithm.h header template automatically generated by a class generator
 * Creation date : mer. mars 5 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef HOUGHTRANSFORMALGORITHM_H
#define HOUGHTRANSFORMALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

#include "Objects/Cluster.h"


namespace arborpfa
{

/** 
 * @brief HoughTransformAlgorithm class
 */ 
class HoughTransformAlgorithm : public ArborAlgorithm 
{
 public:

	/**
	 *
	 */
	class HoughCluster
	{

	public:

		HoughCluster() :
			m_position(0.f, 0.f, 0.f),
		 m_pCluster(NULL)
		{
		}

		~HoughCluster()
		{
			m_rhox.clear();
			m_rhoy.clear();
			m_pCluster = NULL;
		}

		HoughCluster(const HoughCluster &houghCluster);

		pandora::Cluster        *m_pCluster;
		pandora::FloatVector     m_rhox;
		pandora::FloatVector     m_rhoy;
		pandora::CartesianVector m_position;
		bool                    m_addedToMipTrack;
		unsigned int           m_id;

		HoughCluster &operator =(const HoughCluster &houghCluster);

	};

	typedef std::vector<HoughCluster*> HoughClusterVector;

	/**
	 * @brief Helper structure for Hough space point
	 */
	struct HoughBin
	{
		HoughClusterVector m_houghClusterVector;
		int m_theta;
		int m_rho;
	};

	typedef std::vector<HoughBin> HoughBinVector;


		/**
			* @brief Factory class for instantiating algorithm
			*/
		class Factory : public ArborAlgorithmFactory
		{
			public:
				ArborAlgorithm *CreateArborAlgorithm() const;
		};

		/**
			* @brief Run the algorithm
			*/
		pandora::StatusCode Run();

		/**
			* @brief Read settings from Xml handler
			*/
		pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

		/**
		 *
		 */
		pandora::StatusCode ComputeHoughTransform();

		/**
		 *
		 */
		pandora::StatusCode BuildHoughSpace(HoughClusterVector &houghClusterVector, bool useXY, HoughBinVector &houghSpace);

		/**
		 *
		 */
		pandora::StatusCode IsClusterCandidate(pandora::Cluster *pCluster, const pandora::ClusterList *pClusterList, bool &isClusterCandidate) const;

		/**
		 *
		 */
		pandora::StatusCode FindClusterCandidates(const pandora::ClusterList *pInitialClusterList);

		/**
		 *
		 */
		pandora::StatusCode InitializeHoughCluster(pandora::Cluster *pCluster, unsigned int id);

		/**
		 *
		 */
		pandora::StatusCode BuildMipTrackFromClusters(HoughClusterVector &houghClusterVector);

		/**
		 *
		 */
		pandora::StatusCode RemoveNullClusters(HoughBinVector &houghSpace, pandora::IntVector &houghClusterIDs);

		/**
		 *
		 */
		pandora::StatusCode SplitAlignedPointsInMipTrack(const HoughClusterVector &houghClusterVector, unsigned int startNext, std::vector<HoughClusterVector> &mipTrackVector);

		/**
		 *
		 */
		static bool RemoveSmallBins(const HoughBin& houghBin)
		{
			return houghBin.m_houghClusterVector.size() < m_minimumHoughSpaceBinningCut;
		}

		/**
		 *
		 */
		static bool SortByDecreasingBinSize(const HoughBin &bin1, const HoughBin &bin2)
		{
			return bin1.m_houghClusterVector.size() > bin2.m_houghClusterVector.size();
		}

		/**
		 *
		 */
		static bool SortByPseudoLayer(const HoughCluster* cluster1, const HoughCluster *cluster2)
		{
			return cluster1->m_pCluster->GetInnerPseudoLayer() < cluster2->m_pCluster->GetInnerPseudoLayer();
		}


 protected:

		// algorithm tools
		HoughClusterVector        m_houghClusterVector;
//		ClusterVector             m_clustersToDelete;


		// algorithm parameters
		unsigned int            m_maximumClusterSizeForHoughCandidate;
		float                    m_maximumDistanceHoughCandidateCut;
		unsigned int            m_neighborhoodCandidateCut;
		unsigned int            m_bigClusterNeighborhoodCandidateCut;

		unsigned int            m_nBinTheta;
		static unsigned int    m_minimumHoughSpaceBinningCut;

}; 

//-----------------------------------------------------------------------------------------------------

ArborAlgorithm *HoughTransformAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new HoughTransformAlgorithm();
}

} 

#endif  //  HOUGHTRANSFORMALGORITHM_H
