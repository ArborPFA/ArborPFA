/*
 *
 * IntraLayerClusteringAlgorithm.h header template automatically generated by a class generator
 * Creation date : sam. fï¿½vr. 8 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author remi
 * @copyright CNRS , IPNL
 */


#ifndef INTRALAYERCLUSTERINGALGORITHM_H
#define INTRALAYERCLUSTERINGALGORITHM_H

// pandora
#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

namespace arbor
{

/** 
 * @brief IntraLayerClusteringAlgorithm class
 */ 
class IntraLayerClusteringAlgorithm : public ArborAlgorithm
{
 public:

	/**
	 * @brief Factory class for instantiating algorithm
	 */
 class Factory : public ArborAlgorithmFactory
 {
  public:
 	ArborAlgorithm *CreateArborAlgorithm() const;
 };

 /**
  * @brief Run the algorithm
  */
 pandora::StatusCode RunArborAlgorithm();

 /**
  * @brief Read settings from Xml handler
  */
 pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);


protected:

 /**
  * @brief Do a recursive clustering starting each time with pCaloHit and try to adding others to pCluster
  */
 pandora::StatusCode RecursiveClustering(pandora::CaloHitList *pCaloHitList, pandora::Cluster *pCluster, pandora::CaloHit *pCaloHit);

 /**
  *
  */
 pandora::StatusCode SplitClusterInSingleCaloHitClusters(pandora::Cluster *pCluster);

 // algorithm parameters
 float                 m_intraLayerMaxDistance;   ///< The maximum distance between two calo hit for clustering
 pandora::CaloHitList   m_alreadyUsedCaloHitList;  ///< A temporary list of calo hit that have been already used during the clustering
 bool                  m_shouldSplitClusterInSingleCaloHitClusters;
 unsigned int         m_maximumSizeForClusterSplitting;

}; 


//---------------------------------------------------------------------------------------------------

inline ArborAlgorithm *IntraLayerClusteringAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new IntraLayerClusteringAlgorithm();
}


} 

#endif  //  INTRALAYERCLUSTERINGALGORITHM_H
