  /// \file ArborOutputAlgorithm.h
/*
 *
 * ArborOutputAlgorithm.h header template automatically generated by a class generator
 * Creation date : sam. juin 7 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBOROUTPUTALGORITHM_H
#define ARBOROUTPUTALGORITHM_H

// arborpfa
#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

// pandora
#include "Pandora/PandoraInternal.h"

class TFile;

namespace pandora_monitoring
{
	class TTreeWrapper;
}

namespace arbor
{

/** 
 * @brief ArborOutputAlgorithm class
 */ 
class ArborOutputAlgorithm : public ArborAlgorithm 
{
 public:

	/**
		* @brief Factory class for instantiating algorithm
		*/
	class Factory : public ArborAlgorithmFactory
	{
		public:
			ArborAlgorithm *CreateArborAlgorithm() const;
	};

	/**
		* @brief Run the algorithm
		*/
	pandora::StatusCode RunArborAlgorithm();

	/**
		* @brief Read settings from Xml handler
		*/
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 *
	 */
	pandora::StatusCode Initialize();

protected:

	/**
	 * @brief Dtor. Needed to write the output file at the end of processing
	 */
	virtual ~ArborOutputAlgorithm();


	std::string      m_rootFileName;
	std::string      m_rootTreeName;
	std::string      m_fileOpeningMode;

	bool            m_firstFill;
	bool            m_useLcioClasses;
	bool            m_useOnlyHcal;
	unsigned int   m_nCutOnChargedParticle;

	TFile                               *m_pRootFile;
	pandora_monitoring::TTreeWrapper    *m_pTTreeWrapper;
};

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *ArborOutputAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new ArborOutputAlgorithm();
}

} 

#endif  //  ARBOROUTPUTALGORITHM_H
