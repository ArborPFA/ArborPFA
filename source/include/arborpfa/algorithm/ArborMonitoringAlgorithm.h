  /// \file ArborMonitoringAlgorithm.h
/*
 *
 * ArborMonitoringAlgorithm.h header template automatically generated by a class generator
 * Creation date : mar. sept. 23 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORMONITORINGALGORITHM_H
#define ARBORMONITORINGALGORITHM_H

#include "arborpfa/algorithm/ArborAlgorithm.h"
#include "arborpfa/algorithm/ArborAlgorithmFactory.h"

namespace arbor
{

/** 
 * @brief ArborMonitoringAlgorithm class
 */ 
class ArborMonitoringAlgorithm : public ArborAlgorithm 
{
 public:

	/**
		* @brief Factory class for instantiating algorithm
		*/
	class Factory : public ArborAlgorithmFactory
	{
		public:
			ArborAlgorithm *CreateArborAlgorithm() const;
	};

	/**
		* @brief Run the algorithm
		*/
	pandora::StatusCode RunArborAlgorithm();

	/**
		* @brief Read settings from Xml handler
		*/
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

protected:

 /**
  *  @brief  Visualize a specified calo hit list
  *
  *  @param  listName the list name
  */
 void VisualizeCaloHitList(const std::string &listName) const;

 /**
  *  @brief  Visualize a specified calo hit list
  *
  *  @param  listName the list name
  */
 void VisualizeTrackList(const std::string &listName) const;

 /**
  *  @brief  Visualize a specified calo hit list
  *
  *  @param  listName the list name
  */
 void VisualizeClusterList(const std::string &listName) const;

 /**
  *  @brief  Visualize a specified calo hit list
  *
  *  @param  listName the list name
  */
 void VisualizeParticleFlowList(const std::string &listName) const;

 /**
  *
  */
 void VizualizeClusterConnectors() const;


 bool                    m_showConnectors;            ///< Whether to show the connectors for each clusters

 bool                    m_showCurrentCaloHits;      ///< Whether to show current calohitlist
 pandora::StringVector   m_caloHitListNames;         ///< Names of calo hit lists to show

 bool                    m_showCurrentTracks;        ///< Whether to show current tracks
 pandora::StringVector   m_trackListNames;           ///< Names of track lists to show

 bool                    m_showCurrentClusters;      ///< Whether to show current clusters
 pandora::StringVector   m_clusterListNames;         ///< Names of cluster lists to show

 bool                    m_showCurrentPfos;          ///< Whether to show current particle flow object list
 pandora::StringVector   m_pfoListNames;             ///< Names of pfo lists to show

 bool                    m_displayEvent;             ///< Whether to display the event

 bool                    m_blackBackground;          ///< Whether to use a black background color, rather than white
 bool                    m_showDetector;             ///< Whether to display the detector geometry
 std::string             m_hitColors;                ///< Define the hit coloring scheme (default: pfo, choices: pfo, particleid)

 float                   m_thresholdEnergy;          ///< Cell energy threshold for display (em scale)
 float                   m_transparencyThresholdE;   ///< Cell energy for which transparency is saturated (0%, fully opaque)
 float                   m_energyScaleThresholdE;    ///< Cell energy for which color is at top end of continous color palette
};

//--------------------------------------------------------------------------------------------------------------------

inline ArborAlgorithm *ArborMonitoringAlgorithm::Factory::CreateArborAlgorithm() const
{
	return new ArborMonitoringAlgorithm();
}

} 

#endif  //  ARBORMONITORINGALGORITHM_H
