  /// \file Branch.h
/*
 *
 * Branch.h header template automatically generated by a class generator
 * Creation date : mar. juin 3 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef BRANCH_H
#define BRANCH_H

// pandora
#include "Helpers/ClusterHelper.h"

// arbor
#include "arborpfa/arbor/ArborTypes.h"

namespace arbor
{

/** 
 * @brief Branch class
 */ 
class Branch 
{
 public:

		/**
			* @brief Ctor
			*/
		Branch();

		/**
			* @brief Dtor
			*/
		virtual ~Branch();

		/**
			*
			*/
		virtual bool Contains(Object *pObject) const;

		/**
			*
			*/
		virtual float GetLength() const;

		/**
			*
			*/
		virtual unsigned int GetNumberOfObjects() const;

		/**
			*
			*/
		virtual Object *GetBranchSeed() const;

		/**
			*
			*/
		virtual Object *GetBranchLeaf() const;

		/**
			*
			*/
		virtual pandora::StatusCode FitBranch(pandora::ClusterHelper::ClusterFitResult &clusterFitResult) const;

		/**
			*
			*/
		virtual pandora::StatusCode Next();

		/**
			*
			*/
		virtual pandora::StatusCode Previous();

		/**
			*
			*/
		virtual Object *GetCurrent() const;

		/**
			*
			*/
		virtual pandora::StatusCode ResetIteration(ConnectorDirection direction = BACKWARD);

		/**
			*
			*/
		static bool SORT_BY_INCREASING_LENGTH(const Branch *pBranch1, const Branch *pBranch2)
		{
			return pBranch1->GetLength() < pBranch2->GetLength();
		}

		/**
			*
			*/
		static bool SORT_BY_DECREASING_LENGTH(const Branch *pBranch1, const Branch *pBranch2)
		{
			return pBranch1->GetLength() > pBranch2->GetLength();
		}


 protected:

		/**
			*
			*/
		virtual pandora::StatusCode AddNext(Object *pNextObject);

		/**
			*
			*/
		virtual pandora::StatusCode AddPrevious(Object *pPreviousObject);

		// members
	 Object                 *m_pBranchSeed;
	 Object                 *m_pBranchLeaf;
	 ObjectVector            m_objectVector;
	 float                  m_branchLength;
	 ObjectVector::iterator  m_currentIterationObject;

	 // friendship
	 friend class IBranchBuilder;
		friend class Tree;
		friend class ArborContentApiImpl;
		friend class ClusterManager;
}; 

} 

#endif  //  BRANCH_H
