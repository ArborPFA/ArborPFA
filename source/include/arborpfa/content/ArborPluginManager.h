  /// \file ArborPluginManager.h
/*
 *
 * ArborPluginManager.h header template automatically generated by a class generator
 * Creation date : ven. mai 30 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Ete Remi
 * @copyright CNRS , IPNL
 */


#ifndef ARBORPLUGINMANAGER_H
#define ARBORPLUGINMANAGER_H

// arborpfa
#include "arborpfa/arbor/ArborTypes.h"

// pandora
#include "Pandora/StatusCodes.h"
#include "Helpers/XmlHelper.h"

namespace arbor
{

class Arbor;
class IEnergyFunction;

/** 
 * @brief ArborPluginManager class
 */ 
class ArborPluginManager
{
 protected:

	/**
	 * @brief Constructor
	 */
	ArborPluginManager(Arbor *pArbor);

	/**
	 * @brief Destructor
	 */
	virtual ~ArborPluginManager();

	/**
	 *  @brief  Register an energy function
	 *
	 *  @param  energyFunctionName the energy function name
	 *  @param  pEnergyFunction the energy function address to register
	 */
	pandora::StatusCode RegisterEnergyFunction(const std::string &energyFunctionName, IEnergyFunction *pEnergyFunction);

	/**
	 *  @brief  Set the current energy function
	 *
	 *  @param  energyFunctionName the energy function name
	 */
	pandora::StatusCode SetCurrentEnergyFunction(const std::string &energyFunctionName);

	/**
	 *  @brief  Get the current energy function name
	 *
	 *  @param  energyFunctionName the energy function name to receive
	 */
	pandora::StatusCode GetCurrentEnergyFunctionName(std::string &energyFunctionName) const;

	/**
	 *  @brief  Compute and return the energy of the calo hit list using an energy function
	 *
	 *  @param  energyFunctionName the energy function name
	 *  @param  pCaloHitList the calo hit list address
	 *  @param  energy the energy to receive
	 */
	pandora::StatusCode GetEnergy(const std::string &energyFunctionName,
			const pandora::CaloHitList *const pCaloHitList, float &energy) const;

	/**
	 *  @brief  Compute and return the energy resolution at an energy point using an energy function
	 *
	 *  @param  energyFunctionName the energy function name
	 *  @param  energy the energy point
	 *  @param  energy the energy resolution to receive
	 */
	pandora::StatusCode GetEnergyResolution(const std::string &energyFunctionName,
			float energy, float &energyResolution);


	/**
	 * @brief Read the settings for all of the plugins
	 */
	static pandora::StatusCode ReadSettings(const pandora::TiXmlHandle xmlHandle);

	/**
	 * @brief Read the settings for all of the plugins
	 */
	pandora::StatusCode _ReadSettings(const pandora::TiXmlHandle &xmlHandle);

	/**
	 *  @brief  Read energy function settings from the xml handle
	 *
	 *  @param  xmlHandle the xml handle
	 */
	pandora::StatusCode ReadEnergyFunctionSettings(const pandora::TiXmlHandle &xmlHandle);

	typedef std::map<const std::string, IEnergyFunction *> EnergyFunctionMap;

	// energy function members
	std::string             m_currentEnergyFunctionName;
	IEnergyFunction        *m_pCurrentEnergyFunction;
	EnergyFunctionMap       m_energyFunctionMap;

	// needed for ReadSettings() in Pandora
	static arbor::Arbor             *m_pArbor;

	// friendship
	friend class ArborContentApiImpl;
	friend class ArborApiImpl;
	friend class Arbor;
}; 

} 

#endif  //  ARBORPLUGINMANAGER_H
