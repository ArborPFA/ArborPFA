/*
 *
 * ConnectorImpl.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 13 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CONNECTORIMPL_H
#define CONNECTORIMPL_H

#include "arborpfa/content/Connector.h"
#include "arborpfa/arbor/ArborTypes.h"
#include "arborpfa/content/ArborObject.h"

// pandora
#include "Objects/CartesianVector.h"

namespace arborpfa {

class ArborObject;

/** 
 * @brief ConnectorImpl class. </br>
 * Basic implementation of the Connector class
 */ 
class ConnectorImpl : public Connector 
{
 public:

		/**
			* @brief Ctor with the two object to connect and the connection weight
			*
			* @param pObject1 the first object to connect
			* @param pObject2 the second object to connect
			* @param weight the connection weight
			*/
		ConnectorImpl(ArborObject *pObject1, ArborObject *pObject2, const float weight = 1.0);

		/**
			* @brief Dtor
			*/
		virtual ~ConnectorImpl();

		/**
			* @brief Return the first connected object
			*/
		virtual ArborObject *GetFirst() const;

		/**
			* @brief Return the second connected object
			*/
		virtual ArborObject *GetSecond() const;

		/**
			* @brief Set the weight of the connection
			*
			* @param weight the weight of the connection
			*/
		virtual pandora::StatusCode SetWeight(float weight);

		/**
			* @brief Return the connection weight
			*/
		virtual float GetWeight() const;

		/**
			* @brief Return the connected objects in a pair
			*/
		virtual const ArborObjectPair &GetObjects() const;

		/**
		 * @brief Whether the object is the first or second object of this connector
		 *
		 * @param pObject the object to compare
		 */
		virtual bool Contains(ArborObject *pObject) const;

		/**
		 * @brief Return the distance between the two connected objects
		 */
		virtual float GetDistanceBetweenObjects() const;

		/**
		 * @brief Set the type of connection. Often represents a step in </br>
		 * the Arbor algorithm
		 *
		 * @param type the connector type. See enum in ArborTypes.h
		 */
		virtual pandora::StatusCode SetType(ConnectorType type);

		/**
		 * @brief Return the connector type
		 */
		virtual ConnectorType GetType() const;

 protected:

		// members
		ArborObjectPair         m_objectPair;     ///< The objects that are connected
		float                  m_weight;          ///< The connection weight
		ConnectorType           m_type;            ///< The connector type

		// friendship
		friend class ArborObjectImpl;
};

//--------------------------------------------------------------------------------------------------------------------

inline ArborObject *ConnectorImpl::GetFirst() const
{
	return m_objectPair.first;
}

//--------------------------------------------------------------------------------------------------------------------

inline ArborObject *ConnectorImpl::GetSecond() const
{
	return m_objectPair.second;
}

//--------------------------------------------------------------------------------------------------------------------

inline pandora::StatusCode ConnectorImpl::SetWeight(float weight)
{
	m_weight = weight;

	return pandora::STATUS_CODE_SUCCESS;
}

//--------------------------------------------------------------------------------------------------------------------

inline float ConnectorImpl::GetWeight() const
{
	return m_weight;
}



inline const ArborObjectPair &ConnectorImpl::GetObjects() const
{
	return m_objectPair;
}

//--------------------------------------------------------------------------------------------------------------------

inline bool ConnectorImpl::Contains(ArborObject *pObject) const
{
	return ( m_objectPair.first == pObject || m_objectPair.second == pObject ) ? true : false;
}

//--------------------------------------------------------------------------------------------------------------------

inline float ConnectorImpl::GetDistanceBetweenObjects() const
{
	return (m_objectPair.first->GetPosition() - m_objectPair.second->GetPosition()).GetMagnitude();
}

//--------------------------------------------------------------------------------------------------------------------

inline ConnectorType ConnectorImpl::GetType() const
{
	return m_type;
}

//--------------------------------------------------------------------------------------------------------------------

inline pandora::StatusCode ConnectorImpl::SetType(ConnectorType type)
{
	m_type = type;

	return pandora::STATUS_CODE_SUCCESS;
}


} 

#endif  //  CONNECTORIMPL_H
