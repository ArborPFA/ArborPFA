/*
 *
 * ArborObject.h header template automatically generated by a class generator
 * Creation date : lun. fï¿½vr. 10 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBOROBJECT_H
#define ARBOROBJECT_H

#include "arborpfa/arbor/ArborTypes.h"

#include "Pandora/StatusCodes.h"
#include "Pandora/PandoraInputTypes.h"
#include "Objects/CartesianVector.h"

namespace pandora
{
 class CartesianVector;
 class Cluster;
 class Algorithm;
}

namespace arborpfa {

class ArborManager;
class Connector;

/** 
 * @brief ArborObject class
 */
class ArborObject
{
 public:

	 enum Type
	 {
	 	SIMPLE_CALO_HIT,
	 	SMALL_CLUSTER,
	 	MIP_POINT,
	 	TRACK
	 };

		/**
			* @brief  Check if this object is connected with a given one
			*
			* @param  pObject the object to check connection with
			* @return boolean
			*/
		virtual bool IsConnectedWith(ArborObject *pObject) const = 0;

		/**
		 * @brief  Get the connectors to other arbor objects
		 *
		 * @return The connector list
		 */
		virtual const ConnectorList &GetConnectors() const = 0;

		/**
		 * @brief Find a specific connection with an other arbor object
		 *
		 * @param pObject the arbor object to check the connection with
		 * @param pConnector the connector address to receive
		 */
		virtual pandora::StatusCode FindConnector(ArborObject *pObject, Connector *&pConnector) const = 0;

		/**
		 * @brief Get a connector list with a connection weight greater than a given weight. The connector list is appended to given list
		 *
		 * @param weight the minimum weight for the connectors
		 * @param connectorList the connector list to which the connectors will be appended
		 */
		virtual pandora::StatusCode GetConnectorsWithWeightGreaterThan(float weight, ConnectorList &connectorList) = 0;

		/**
		 * @brief Get a connector list with a connection weight lesser than a given weight. The connector list is appended to given list
		 *
		 * @param weight the maximum weight for the connectors
		 * @param connectorList the connector list to which the connectors will be appended
		 */
		virtual pandora::StatusCode GetConnectorsWithWeightLessThan(float weight, ConnectorList &connectorList) = 0;

		/**
		 * @brief Get the tag on this object
		 *
		 * @return the tag string
		 */
		virtual ArborObject::Type GetType() const = 0;

		/**
		 * @brief Get the position of the object
		 *
		 * @param position the position to retrieve
		 */
		virtual const pandora::CartesianVector &GetPosition() const = 0;

		/**
		 * @brief Whether the object is connected with other objects
		 *
		 * @return boolean
		 */
		virtual bool IsConnected() const = 0;

		/**
		 * @brief Merge the content of the object in the cluster.
		 *
		 * @param pCluster the cluster into which the content will be merge
		 */
		virtual pandora::StatusCode MergeContentInCluster(const pandora::Algorithm &algorithm, pandora::Cluster *pCluster) = 0;

		/**
		 *
		 */
		virtual pandora::StatusCode CreateCluster(const pandora::Algorithm &algorithm, pandora::Cluster *&pCluster) = 0;

		/**
		 * @brief Get the number of connections with this object
		 *
		 * @return Number of connections
		 */
		virtual unsigned int GetNumberOfConnections() const = 0;

		/**
		 * @brief Connect this object with the given one and put a weight on this connection
		 *
		 * @param pObject the arbor object to connect with
		 * @param
		 */
		virtual pandora::StatusCode ConnectWith(ArborObject *pObject, float weight = 1.0) = 0;

		/**
		 * @brief Connect this object with the given one, put a weight on this connection and retrieve the connector
		 *
		 * @param
		 */
		virtual pandora::StatusCode ConnectWith(ArborObject *pObject, Connector *&pConnector, float weight = 1.0) = 0;

		/**
		 *
		 */
		virtual pandora::StatusCode RemoveConnectionWith(ArborObject *pObject) = 0;

		/**
		 *
		 */
		virtual pandora::StatusCode RemoveAllConnectionsExcept(ArborObject *pObject) = 0;

		/**
		 *
		 */
		virtual ConnectorList &GetConnectors() = 0;

		/**
		 *
		 */
		virtual bool IsIsolated() const = 0;

		/**
		 *
		 */
		virtual void SetIsIsolated(bool boolean) = 0;

		/**
		 *
		 */
		virtual pandora::Granularity GetGranularity() const = 0;

		/**
		 *
		 */
		virtual pandora::PseudoLayer GetPseudoLayer() const = 0;

		/**
		 *
		 */
		inline static bool SortByFromInnermostPosition(ArborObject *pObj1, ArborObject *pObj2)
		{
			const pandora::CartesianVector differenceVector = pObj2->GetPosition() - pObj1->GetPosition();
			float openingAngle = pObj1->GetPosition().GetOpeningAngle(differenceVector);
			return openingAngle < M_PI_2;
		}

		friend class ArborManager;
		friend class ArborObjectImpl;
}; 

typedef ArborObject AO;

} 

#endif  //  ARBOROBJECT_H
