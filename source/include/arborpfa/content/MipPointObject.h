/*
 *
 * MipPointObject.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 20 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef MIPPOINTOBJECT_H
#define MIPPOINTOBJECT_H

#include "arborpfa/content/ArborObjectImpl.h"
#include "Pandora/PandoraInputTypes.h"

namespace arborpfa
{

/** 
 * @brief MipPointObject class
 */
class MipPointObject : public ArborObjectImpl
{
 public:

		enum Type
		{
			MIP_START_POINT,
			MIP_END_POINT
		};

		/**
			* @brief Ctor
			*/
		MipPointObject(pandora::Cluster *pCluster, MipPointObject::Type type);

		/**
			* @brief Dtor
			*/
		virtual ~MipPointObject();

		/**
		 *
		 */
		MipPointObject::Type GetMipPointType() const;

		/**
		 *
		 */
		pandora::Cluster *GetMipCluster() const;

		/**
		 *
		 */
		pandora::StatusCode MergeContentInCluster(const pandora::Algorithm &algorithm, pandora::Cluster *pCluster);

		/**
		 *
		 */
		pandora::StatusCode CreateCluster(const pandora::Algorithm &algorithm, pandora::Cluster *&pCluster);

		/**
		 *
		 */
		unsigned int GetPseudoLayer() const;

		/**
		 *
		 */
		pandora::StatusCode SetAssociatedStartingPoint(MipPointObject *pEndPoint);

		/**
		 *
		 */
		pandora::StatusCode SetAssociatedEndingPoint(MipPointObject *pEndPoint);


protected:

 MipPointObject::Type         m_mipPointType;
 pandora::Cluster             *m_pCluster;
 bool                        m_clusterAlreadyCreated;
 bool                        m_alreadyMergeContent;

 MipPointObject     *m_pEndingPoint;
 MipPointObject     *m_pStartingPoint;

};


typedef std::set<MipPointObject*>    MipPointObjectList;
typedef std::vector<MipPointObject*> MipPointObjectVector;


inline MipPointObject::Type MipPointObject::GetMipPointType() const
{
	return m_mipPointType;
}



inline pandora::Cluster *MipPointObject::GetMipCluster() const
{
	return m_pCluster;
}

} 

#endif  //  MIPPOINTOBJECT_H
