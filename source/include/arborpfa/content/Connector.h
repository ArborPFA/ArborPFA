  /// \file Connector.h
/*
 *
 * Connector.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 7 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CONNECTOR_H
#define CONNECTOR_H

// pandora
#include "Pandora/StatusCodes.h"

// arborpfa
#include "arborpfa/arbor/ArborTypes.h"

namespace arbor
{

class Object;

/** 
 * @brief Connector class. </br>
 * Base class for all connection type.
 */ 
class Connector 
{
 public:

		/**
			* @brief Ctor with the two object to connect and the connection weight
			*
			* @param pObject1 the first object to connect
			* @param pObject2 the second object to connect
			* @param weight the connection weight
			*/
		Connector(Object *pObject1, Object *pObject2, const float weight = 1.0);

		/**
			* @brief Dtor
			*/
		virtual ~Connector();

		/**
			* @brief Return the first connected object
			*/
		virtual Object *GetFirst() const;

		/**
			* @brief Return the second connected object
			*/
		virtual Object *GetSecond() const;

		/**
			* @brief Set the weight of the connection
			*
			* @param weight the weight of the connection
			*/
		virtual pandora::StatusCode SetWeight(float weight);

		/**
			* @brief Return the connection weight
			*/
		virtual float GetWeight() const;

		/**
			* @brief Return the connected objects in a pair
			*/
		virtual const ObjectPair &GetObjects() const;

		/**
		 * @brief Whether the object is the first or second object of this connector
		 *
		 * @param pObject the object to compare
		 */
		virtual bool Contains(const Object *pObject) const;

		/**
		 * @brief Return the distance between the two connected objects
		 */
		virtual float GetDistanceBetweenObjects() const;

		/**
		 * @brief Set the type of connection. Often represents a step in </br>
		 * the Arbor algorithm
		 *
		 * @param type the connector type. See enum in ArborTypes.h
		 */
		virtual pandora::StatusCode SetType(ConnectorType type);

		/**
		 * @brief Return the connector type
		 */
		virtual ConnectorType GetType() const;

 protected:

		// members
		ObjectPair              m_objectPair;     ///< The objects that are connected
		float                  m_weight;          ///< The connection weight
		ConnectorType           m_type;            ///< The connector type

//		/**
//			* @brief Return the first connected object
//			*/
//		virtual Object *GetFirst() const = 0;
//
//		/**
//			* @brief Return the second connected object
//			*/
//		virtual Object *GetSecond() const = 0;
//
//		/**
//			* @brief Set the weight of the connection
//			*
//			* @param weight the weight of the connection
//			*/
//		virtual pandora::StatusCode SetWeight(float weight) = 0;
//
//		/**
//			* @brief Return the connection weight
//			*/
//		virtual float GetWeight() const = 0;
//
//		/**
//			* @brief Return the connected objects in a pair
//			*/
//		virtual const ObjectPair &GetObjects() const = 0;
//
//		/**
//		 * @brief Whether the object is the first or second object of this connector
//		 *
//		 * @param pObject the object to compare
//		 */
//		virtual bool Contains(Object *pObject) const = 0;
//
//		/**
//		 * @brief Return the distance between the two connected objects
//		 */
//		virtual float GetDistanceBetweenObjects() const = 0;
//
//		/**
//		 * @brief Set the type of connection. Often represents a step in </br>
//		 * the Arbor algorithm
//		 *
//		 * @param type the connector type. See enum in ArborTypes.h
//		 */
//		virtual pandora::StatusCode SetType(ConnectorType type) = 0;
//
//		/**
//		 * @brief Return the connector type
//		 */
//		virtual ConnectorType GetType() const = 0;

}; 

} 

#endif  //  CONNECTOR_H
