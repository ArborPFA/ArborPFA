/*
 *
 * ArborClusterManager.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 13 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CLUSTERMANAGER_H
#define CLUSTERMANAGER_H

// pandora
#include "Managers/AlgorithmObjectManager.h"
#include "Pandora/PandoraInternal.h"

// arborpfa
#include "arborpfa/content/Cluster.h"


namespace arbor
{

class ArborAlgorithm;

/** 
 * @brief ArborClusterManager class
 */ 
class ClusterManager : public pandora::AlgorithmObjectManager<arbor::Cluster>
{
 public:
 /**
  * @brief Ctor
  */
 ClusterManager();

 /**
  * @brief Dtor 
  */
 virtual ~ClusterManager();

protected:

 /**
  *
  */
 pandora::StatusCode CreateTemporaryListAndSetCurrent(const ArborAlgorithm *pAlgorithm, std::string &temporaryListName);


 /**
  *
  */
 pandora::StatusCode	ReplaceCurrentAndAlgorithmInputLists(const ArborAlgorithm *algorithm, const std::string &newListName);

 /**
  *
  */
 pandora::StatusCode CreateCluster(arbor::Cluster *&pCluster, Object *pSeedObject, ITreeBuilder *pTreeBuilder);

 /**
  *
  */
 pandora::StatusCode CreateCluster(arbor::Cluster *&pCluster, Tree *pInputTree);

 /**
  *
  */
 pandora::StatusCode CreateBranch(arbor::Branch *&pBranch, Tree* pTree) const;

 /**
  *
  */
 pandora::StatusCode RemoveBranchFromTree(Tree* pTree, arbor::Branch *pBranch) const;

 /**
  *
  */
 pandora::StatusCode MoveTree(arbor::Cluster *pOldCluster, arbor::Cluster *pNewCluster, Tree *pMovingTree) const;

 // friend class field
 friend class ArborImpl;
 friend class ArborContentApiImpl;
 friend class ArborAlgorithm;
}; 

} 

#endif  //  CLUSTERMANAGER_H
