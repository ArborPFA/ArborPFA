  /// \file EcalSdhcalEnergyFunction.h
/*
 *
 * EcalSdhcalEnergyFunction.h header template automatically generated by a class generator
 * Creation date : sam. sept. 27 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ECALSDHCALENERGYFUNCTION_H
#define ECALSDHCALENERGYFUNCTION_H

#include "arborpfa/content/IEnergyFunction.h"


namespace arbor
{

/** 
 *  @brief  EcalSdhcalEnergyFunction class.
 *
 *  Energy related implementation for combined energy
 *  computation and energy resolution
 */ 
class EcalSdhcalEnergyFunction : public IEnergyFunction
{
public:

	pandora::StatusCode GetEnergy(const pandora::CaloHitList *const pCaloHitList, float &energy) const;
	pandora::StatusCode GetEnergyResolution(float energy, float &energyResolution) const;
	pandora::StatusCode ReadSettings(const pandora::TiXmlHandle &xmlHandle);

protected:

	// for sdhcal energy computation
 FloatVector       m_sdhcalEnergyConstantParameters;
 FloatVector       m_sdhcalEnergyThresholdValues;

 // for energy resolution
	float            m_resolutionEnergyFactor;
	float            m_resolutionConstantFactor;
	float            m_resolutionEnergySquareFactor;
}; 

} 

#endif  //  ECALSDHCALENERGYFUNCTION_H
