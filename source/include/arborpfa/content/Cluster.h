  /// \file Cluster.h
/*
 *
 * Cluster.h header template automatically generated by a class generator
 * Creation date : mar. juin 3 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBORCLUSTER_H
#define ARBORCLUSTER_H

// pandora
#include "Pandora/StatusCodes.h"
#include "Pandora/PandoraInputTypes.h"
#include "Objects/CartesianVector.h"

// arbor
#include "arborpfa/arbor/ArborTypes.h"

namespace pandora
{
template<typename T> class AlgorithmObjectManager;
}

namespace arbor
{

/** 
 * @brief Cluster class
 */ 
class Cluster
{
 public:

	/**
	 *
	 */
	const TreeList &GetTreeList() const;

	/**
	 *
	 */
	const pandora::CartesianVector &GetSeedPosition() const;

	/**
	 *
	 */
	const pandora::PseudoLayer &GetSeedPseudoLayer() const;

	/**
	 *
	 */
	ObjectList GetObjectList() const;

	/**
	 *
	 */
	pandora::CaloHitList GetCaloHitList() const;

	/**
	 *
	 */
	pandora::StatusCode GetAssociatedTrack(const pandora::Track *&pTrack) const;

	/**
	 *
	 */
	pandora::StatusCode SetAssociatedTrack(pandora::Track *pTrack);

	/**
	 *
	 */
	unsigned int GetNObjects() const;

	/**
	 *
	 */
	unsigned int GetNCaloHits() const;

	/**
	 *
	 */
 static bool SORT_BY_SEED_PSEUDO_LAYER(const Cluster *pCluster1, const Cluster *pCluster2);


 protected:

 /**
  * @brief Ctor
  */
 Cluster();

 /**
  * @brief Dtor 
  */
 virtual ~Cluster();

 /**
  *
  */
 pandora::StatusCode AddTree(Tree *pTree);

 /**
  *
  */
 pandora::StatusCode RemoveTree(Tree *pTree);

 TreeList                       m_treeList;
 pandora::CartesianVector       m_seedPosition;
 pandora::PseudoLayer           m_seedPseudoLayer;
 pandora::Track                *m_pAssociatedTrack;


 friend class pandora::AlgorithmObjectManager<arbor::Cluster>;
 friend class ClusterManager;
};

//--------------------------------------------------------------------------------------------------------------------

inline bool Cluster::SORT_BY_SEED_PSEUDO_LAYER(const Cluster *pCluster1, const Cluster *pCluster2)
{
	return pCluster1->GetSeedPseudoLayer() < pCluster2->GetSeedPseudoLayer();
}

} 

#endif  //  ARBORCLUSTER_H
