/*
 *
 * ArborObjectImpl.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 13 2014
 *
 * This file is part of ArborPFA libraries.
 * 
 * ArborPFA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * ArborPFA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ArborPFA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ARBOROBJECTIMPL_H
#define ARBOROBJECTIMPL_H

// arborpfa
#include "arborpfa/content/ArborObject.h"

// pandora
#include "Objects/CartesianVector.h"

namespace arborpfa
{

/** 
 * @brief ArborObjectImpl class
 */ 
class ArborObjectImpl : public ArborObject
{
 public:

 /**
  * @brief Constructor
  */
 ArborObjectImpl(const std::string &tagName, const pandora::CartesianVector &position);

 /**
  * @brief Destructor
  */
 virtual ~ArborObjectImpl();

	/**
		* @brief  Check if this object is connected with a given one
		*
		* @param  pObject the object to check connection with
		* @return boolean
		*/
	virtual bool IsConnectedWith(ArborObject *pObject) const;

	/**
	 * @brief  Get the connectors to other arbor objects
	 *
	 * @return The connector list
	 */
	virtual const ConnectorList &GetConnectors() const;

	/**
	 * @brief Find a specific connection with an other arbor object
	 *
	 * @param pObject the arbor object to check the connection with
	 * @param pConnector the connector address to receive
	 */
	virtual pandora::StatusCode FindConnector(ArborObject *pObject, Connector *&pConnector) const;

	/**
	 * @brief Get a connector list with a connection weight greater than a given weight. The connector list is appended to given list
	 *
	 * @param weight the minimum weight for the connectors
	 * @param connectorList the connector list to which the connectors will be appended
	 */
	virtual pandora::StatusCode GetConnectorsWithWeightGreaterThan(float weight, ConnectorList &connectorList);

	/**
	 * @brief Get a connector list with a connection weight lesser than a given weight. The connector list is appended to given list
	 *
	 * @param weight the maximum weight for the connectors
	 * @param connectorList the connector list to which the connectors will be appended
	 */
	virtual pandora::StatusCode GetConnectorsWithWeightLessThan(float weight, ConnectorList &connectorList);

	/**
	 * @brief Get the tag on this object
	 *
	 * @return the tag string
	 */
	virtual const std::string &GetTag() const;

//	/**
//	 * @brief Retrieve the object encapsulated in the arbor object
//	 *
//	 * @return the address of the object
//	 */
//	virtual void *RetrieveObject() const = 0;

	/**
	 * @brief Get the position of the object
	 *
	 * @param position the position to retrieve
	 */
	virtual const pandora::CartesianVector &GetPosition() const;

protected:

	/**
	 * @brief Connect this object with the given one and put a weight on this connection
	 *
	 * @param pObject the arbor object to connect with
	 * @param
	 */
	virtual pandora::StatusCode ConnectWith(ArborObject *pObject, float weight = 1.0);

	/**
	 * @brief Connect this object with the given one, put a weight on this connection and retrieve the connector
	 *
	 * @param
	 */
	virtual pandora::StatusCode ConnectWith(ArborObject *pObject, Connector *&pConnector, float weight = 1.0);

	/**
	 *
	 */
	virtual pandora::StatusCode RemoveConnectionWith(ArborObject *pObject);

	/**
	 *
	 */
	virtual pandora::StatusCode RemoveAllConnectionsExcept(ArborObject *pObject);

	/**
	 *
	 */
	virtual ConnectorList &GetConnectors();


	// members
 ConnectorList                m_connectorList;         ///< The connector of this object
 std::string                  m_tagName;               ///< The associated tag of this object
 pandora::CartesianVector     m_position;              ///< The position of this object


 friend class ConnectorImpl;
}; 

} 

#endif  //  ARBOROBJECTIMPL_H
